
// Получить данные из JSON.
// 
// Параметры:
//  ТелоЗапроса - Строка - Тело запроса
//  ПараметрыДата - Строка - Параметры дата
// 
// Возвращаемое значение:
//  Произвольный - Получить данные из JSON
Функция ПолучитьДанныеИзJSON(ТелоЗапроса="",ПараметрыДата = "") Экспорт
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(ТелоЗапроса);

	Возврат ПрочитатьJSON(ЧтениеJSON,,ПараметрыДата);
КонецФункции



// Сериализовать JSON.
// 
// Параметры:
//  ДанныеСериализации - Структура - Данные сериализации:
// 
// Возвращаемое значение:
//  Строка - Сериализовать JSON
Функция СериализоватьJSON(ДанныеСериализации) Экспорт

	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, ДанныеСериализации);

	Возврат ЗаписьJSON.Закрыть();
КонецФункции


// Получить результат отправки номенклатуры.
// 
// Параметры:
//  МассивНоменклатуры - Массив из СправочникСсылка.Номенклатура
//  Организация - СправочникСсылка.Организации
// 
// Возвращаемое значение:
//  Структура, Неопределено, Произвольный - Получить результат отправки номенклатуры
Функция ПолучитьРезультатОтправкиНоменклатуры(МассивНоменклатуры,Организация) Экспорт
	
	ДанныеПоОрганизации = ПолучитьДанныеПоОрганизации(Организация);
	
	СтруктураТокенов = Новый Структура;// Структура 
	
	ОбработкаИнтеграции = Обработки.TK_ОбработкаИнтеграции.Создать();
	ОбработкаИнтеграции.Email = ДанныеПоОрганизации.УчетнаяЗапись.Email;
	ОбработкаИнтеграции.Пароль = ДанныеПоОрганизации.УчетнаяЗапись.Пароль;
	ОбработкаИнтеграции.ВыполнитьАвторизацию(СтруктураТокенов,Ложь);
	
	ТокенСессии = ОбработкаИнтеграции.ПолучитьТокенСессии(СтруктураТокенов);
	
	Результат = ОбработкаИнтеграции.ПолучитьРезультатОтправкиНоменклатуры(МассивНоменклатуры, ТокенСессии,СокрЛП(ДанныеПоОрганизации.ОрганизацияНаСайте));// Структура
	
	Если ТипЗнч(Результат) = Тип("Массив") Тогда
		СинхронизоватьНоменклатуру(Результат,Организация);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции



// Синхронизовать номенклатуру.
// 
// Параметры:
//  МассивДанных - Массив из Структура,
//  Организация - СправочникСсылка.Организации
Процедура СинхронизоватьНоменклатуру(МассивДанных,Организация)
	
	Для Каждого Элемент Из МассивДанных Цикл
		УникальныйИдентификаторВ1С = Элемент.externalId;
		ИДНаСайте = Элемент.id;

		Номенклатура = Справочники.Номенклатура.ПолучитьСсылку(
			Новый УникальныйИдентификатор(УникальныйИдентификаторВ1С));

		Если ЗначениеЗаполнено(Номенклатура) Тогда
			МенеджерЗаписи = РегистрыСведений.TK_СоответствияНоменклатуры.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Номенклатура = Номенклатура;
			МенеджерЗаписи.Организация = Организация;
			МенеджерЗаписи.ВнешнийID = ИДНаСайте;
			МенеджерЗаписи.Записать();
		КонецЕсли;

	КонецЦикла;
	
КонецПроцедуры




// Получить данные по организации.
// 
// Параметры:
// Организация - СправочникСсылка.Организации -
// 
// Возвращаемое значение:
//  Структура - Получить данные по организации:
// * УчетнаяЗапись 
// * ОрганизацияНаСайте 
Функция ПолучитьДанныеПоОрганизации(Организация)
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	TK_СоответствияОрганизаций.УчетнаяЗапись,
	|	TK_СоответствияОрганизаций.ОрганизацияНаСайте
	|ИЗ
	|	РегистрСведений.TK_СоответствияОрганизаций КАК TK_СоответствияОрганизаций
	|ГДЕ
	|	TK_СоответствияОрганизаций.Организация = &Организация
	|СГРУППИРОВАТЬ ПО
	|	TK_СоответствияОрганизаций.УчетнаяЗапись,
	|	TK_СоответствияОрганизаций.ОрганизацияНаСайте");
	Запрос.УстановитьПараметр("Организация",Организация );
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Структура = Новый Структура("УчетнаяЗапись,ОрганизацияНаСайте",Выборка.УчетнаяЗапись,Выборка.ОрганизацияНаСайте );
	
	Возврат Структура;
	
КонецФункции