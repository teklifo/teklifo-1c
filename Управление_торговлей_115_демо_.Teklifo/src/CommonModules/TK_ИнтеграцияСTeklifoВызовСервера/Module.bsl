#Область ПрограммныйИнтерфейс

// Обработчик регламентного задания загрузки коммерческих предложений от поставщиков на Teklifo.
Процедура ОбменДаннымиСTeklifo() Экспорт

	ЗагрузитьКоммерческиеПредложенияОтПоставщиков();

КонецПроцедуры

// Публикует запрос цен поставщикам на сервисе Teklifo.
// 
// Параметры:
//  ЗапросЦенПоставщикам - ДокументСсылка.TK_ЗапросЦенПоставщикам - запрос цен поставщикам
// 
// Возвращаемое значение:
//  Булево - результат публикации запроса цен поставщикам
Функция ОпубликоватьЗапросЦенПоставщикамНаTeklifo(ЗапросЦенПоставщикам) Экспорт

	Результат = Ложь;

	РеквизитыЗапросаЦенПоставщикам = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЗапросЦенПоставщикам,
		"Организация, Товары");
	
	// 1. Инициализация обработки интеграции.
	ИнтеграцияСTeklifo = ИнициализироватьОбработкуИнтеграцииСTeklifo(РеквизитыЗапросаЦенПоставщикам.Организация);
	Если ИнтеграцияСTeklifo = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;

	// 2. Выгрузка номенклатуры документа.
	МассивНоменклатуры = РеквизитыЗапросаЦенПоставщикам.Товары.Выгрузить().ВыгрузитьКолонку("Номенклатура");
	РезультатВыгрузкиНоменклатуры = ИнтеграцияСTeklifo.ВыгрузитьНоменклатуруНаTeklifo(МассивНоменклатуры);
	Если Не РезультатВыгрузкиНоменклатуры Тогда
		ОбщегоНазначения.СообщитьПользователю(СтрШаблон(НСтр(
			"ru = 'Не удалось выгрузить номенклатурные позиции на Teklifo.'"), ИнтеграцияСTeklifo.УчетнаяЗапись));
		Возврат Результат;
	КонецЕсли;

	// 3. Выгрузка непосредственного самого документа.
	Результат = ИнтеграцияСTeklifo.ОпубликоватьЗапросЦенПоставщикамНаTeklifo(ЗапросЦенПоставщикам);
	Если Не Результат Тогда
		ОбщегоНазначения.СообщитьПользователю(СтрШаблон(НСтр(
			"ru = 'Не удалось выполнить публикацию документа %1.'"), ЗапросЦенПоставщикам));
		Возврат Результат;
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Получить результат получения запроса цен.
// 
// Параметры:
//  Организация - СправочникСсылка.Организации - Организация
//  URL - Строка - URL на запрос цен от клиента
// 
// Возвращаемое значение:
//  Булево - результат загрузка запроса цен от клиента
Функция ЗагрузитьЗапросЦенОтКлиентаПоURL(Организация, URL = "") Экспорт

	ЗапросЦенОтКлиента = Документы.TK_ЗапросЦенОтКлиента.ПустаяСсылка();

	// 1. Инициализация обработки интеграции.
	ИнтеграцияСTeklifo = ИнициализироватьОбработкуИнтеграцииСTeklifo(Организация);
	Если ИнтеграцияСTeklifo = Неопределено Тогда
		Возврат ЗапросЦенОтКлиента;
	КонецЕсли;
	
	// 2. Проверка существования запроса цен с указанным идентификатором.
	ИдентификаторЗапросаЦен = ИзвлечьИдентификаторИзURLЗапросаЦен(URL);
	Если Не ИнтеграцияСTeklifo.ПроверитьСуществованиеЗапросаЦенаПоИдентификатору(ИдентификаторЗапросаЦен) Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр(
			"ru = 'Не удалось найти запрос цен по указанной ссылке. Пожалуйста, проверьте правильность введеного URL.'"),
			ИнтеграцияСTeklifo.УчетнаяЗапись);
		Возврат ЗапросЦенОтКлиента;
	КонецЕсли;
	
	// 3. Подтверждение участия организации в запросе цен.
	Если Не ИнтеграцияСTeklifo.ПодтвердитьУчастиеОрганизацииВЗапросеЦенОтКлиента(ИдентификаторЗапросаЦен) Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр(
			"ru = 'Не удалось подтвердить участие указанной организации в данном запросе цен.'"),
			ИнтеграцияСTeklifo.УчетнаяЗапись);
		Возврат ЗапросЦенОтКлиента;
	КонецЕсли;
	
	// 4. Загрузка документа запроса цен от клиента.
	Возврат ИнтеграцияСTeklifo.ЗагрузитьЗапросЦенОтКлиента(ИдентификаторЗапросаЦен);

КонецФункции

// Публикует коммерческое предложение клиенту на сервисе Teklifo.
// 
// Параметры:
//  КоммерческоеПредложениеКлиенту - ДокументСсылка.TK_КоммерческоеПредложениеКлиенту - коммерческое предложение клиенту
// 
// Возвращаемое значение:
//  Булево - результат публикации коммерческого предложения клиенту
Функция ОпубликоватьКоммерческоеПредложениеКлиентуНаTeklifo(КоммерческоеПредложениеКлиенту) Экспорт

	Результат = Ложь;

	Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(КоммерческоеПредложениеКлиенту, "Организация");
	
	// 1. Инициализация обработки интеграции.
	ИнтеграцияСTeklifo = ИнициализироватьОбработкуИнтеграцииСTeklifo(Организация);
	Если ИнтеграцияСTeklifo = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;

	// 2. Выгрузка непосредственного самого документа.
	Результат = ИнтеграцияСTeklifo.ОпубликоватьКоммерческоеПредложениеКлиентуНаTeklifo(КоммерческоеПредложениеКлиенту);
	Если Не Результат Тогда
		ОбщегоНазначения.СообщитьПользователю(СтрШаблон(НСтр(
			"ru = 'Не удалось отправить документ %1.'"), КоммерческоеПредложениеКлиенту));
		Возврат Результат;
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Заполняет и записывает контрагента и партнера по данным Teklifo.
// 
// Параметры:
//  ДанныеЗаполнения - Структура - Данные заполнения
// 
// Возвращаемое значение:
//  Структура - Заполнить и записать контрагента и партнера по данным Teklifo:
// * Партнер - СправочникСсылка.Партнеры
// * Контрагент - СправочникСсылка.Контрагенты
Функция ЗаполнитьИЗаписатьКонтрагентаИПартнераПоДаннымTeklifo(ДанныеЗаполнения) Экспорт

	ПартнерОбъект = ДанныеЗаполнения.ПартнерОбъект;
	КонтрагентОбъект = ДанныеЗаполнения.КонтрагентОбъект;
	ДанныеОрганизацииПартнера = ДанныеЗаполнения.ДанныеОрганизацииПартнера;
	ЭтоПоставщик = ДанныеЗаполнения.ЭтоПоставщик;
	ЭтоКлиент = ДанныеЗаполнения.ЭтоКлиент;

	ПартнерОбъект.Наименование = ДанныеОрганизацииПартнера.name;
	ПартнерОбъект.НаименованиеПолное = ДанныеОрганизацииПартнера.name;
	ПартнерОбъект.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.Компания;
	ПартнерОбъект.Поставщик = ЭтоПоставщик;
	ПартнерОбъект.Клиент = ЭтоКлиент;
	ПартнерОбъект.Записать();
	Партнер = ПартнерОбъект.Ссылка;

	КонтрагентОбъект.TK_ИдентификаторTeklifo = ДанныеОрганизацииПартнера.id;
	КонтрагентОбъект.Наименование = ДанныеОрганизацииПартнера.name;
	КонтрагентОбъект.НаименованиеПолное = ДанныеОрганизацииПартнера.name;
	КонтрагентОбъект.ИНН = ДанныеОрганизацииПартнера.tin;
	КонтрагентОбъект.Партнер = Партнер;
	КонтрагентОбъект.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо;
	КонтрагентОбъект.Записать();

	Возврат Новый Структура("Партнер, Контрагент", Партнер, КонтрагентОбъект.Ссылка);

КонецФункции

// Возвращает соответствующее значение ставки НДС на Teklifo.
// 
// Параметры:
//  СтавкаНДС - СправочникСсылка.СтавкиНДС - Ставка НДС
// 
// Возвращаемое значение:
//  Строка - Ставка НДС на Teklifo
Функция ЗначениеСтавкиНДСНаTeklifo(СтавкаНДС) Экспорт

	Если СтавкаНДС = Справочники.СтавкиНДС.БезНДС Тогда
		Возврат "NOVAT";
	КонецЕсли;

	Ставка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтавкаНДС, "Ставка");

	Если Ставка = 0 Тогда
		Возврат "VAT0";
	ИначеЕсли Ставка = 18 Тогда
		Возврат "VAT18";
	ИначеЕсли Ставка = 20 Тогда
		Возврат "VAT20";
	Иначе
		Возврат "NOVAT";
	КонецЕсли;

КонецФункции

// Возвращает ставку НДС по значению на Teklifo.
// 
// Параметры:
//  Ставка - Строка - Ставка НДС на Teklifo
// 
// Возвращаемое значение:
//  СправочникСсылка.СтавкиНДС - Ставка НДС
Функция СтавкаНДСИзЗначенияTeklifo(Ставка) Экспорт

	Если Ставка = "VAT0" Тогда
		Возврат СтавкаНДСПоЧисловойСтавке(0);
	ИначеЕсли Ставка = "VAT18" Тогда
		Возврат СтавкаНДСПоЧисловойСтавке(18);
	ИначеЕсли Ставка = "VAT20" Тогда
		Возврат СтавкаНДСПоЧисловойСтавке(20);
	Иначе
		Возврат Справочники.СтавкиНДС.БезНДС;
	КонецЕсли;

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ИнициализироватьОбработкуИнтеграцииСTeklifo(Организация)

	ИнтеграцияСTeklifo = Обработки.TK_ИнтеграцияСTeklifo.Создать();
	ИнтеграцияСTeklifo.Организация = Организация;
	Если Не ИнтеграцияСTeklifo.ИнициализироватьПараметрыОбменаПоОрганизации() Тогда
		ОбщегоНазначения.СообщитьПользователю(СтрШаблон(НСтр(
			"ru = 'Не определена учетная запись интеграции с Teklifo для организации %1.'"),
			ИнтеграцияСTeklifo.Организация));
		Возврат Неопределено;
	КонецЕсли;

	ИнтеграцияСTeklifo.ПолучитьCSRFТокен();

	Если Не ИнтеграцияСTeklifo.АвторизоватьПользователя() Тогда
		ОбщегоНазначения.СообщитьПользователю(СтрШаблон(НСтр(
			"ru = 'Не удалось пройти авторизацию для учетной записи %1. Проверьте правильность ввода логина и пароля.'"),
			ИнтеграцияСTeklifo.УчетнаяЗапись));
		Возврат Неопределено;
	КонецЕсли;

	Возврат ИнтеграцияСTeklifo;

КонецФункции

Функция ИзвлечьИдентификаторИзURLЗапросаЦен(Url)

	ПодстрокаПоиска = "rfq/";

	НомерСимвола = СтрНайти(Url, ПодстрокаПоиска);

	Если НомерСимвола <> 0 Тогда
		Возврат Сред(Url, НомерСимвола + СтрДлина(ПодстрокаПоиска));
	КонецЕсли;

	Возврат "";

КонецФункции

Процедура ЗагрузитьКоммерческиеПредложенияОтПоставщиков()

	Результат = КоммерческиеПредложенияПоставщиковПоОткрытымЗапросамЦен();

	ДанныеКоммерческихПредложенийКЗаписи = Новый Массив;

	ВыборкаОрганизация = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаОрганизация.Следующий() Цикл

		ИнтеграцияСTeklifo = ИнициализироватьОбработкуИнтеграцииСTeklifo(ВыборкаОрганизация.Организация);
		Если ИнтеграцияСTeklifo = Неопределено Тогда
			Продолжить;
		КонецЕсли;

		ВыборкаЗапросЦенПоставщикам = ВыборкаОрганизация.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаЗапросЦенПоставщикам.Следующий() Цикл

			ВыборкаИдентификатор = ВыборкаЗапросЦенПоставщикам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

			Пока ВыборкаИдентификатор.Следующий() Цикл

				ДанныеКоммерческихПредложенийПоставщиков = ИнтеграцияСTeklifo.ДанныеКоммерческихПредложенийПоставщиков(
					ВыборкаИдентификатор.Идентификатор);

				ВыборкаКоммерческихПредложений = ВыборкаИдентификатор.Выбрать();

				Для Каждого ДанныеКоммерческогоПредложения Из ДанныеКоммерческихПредложенийПоставщиков Цикл

					ВыборкаКоммерческихПредложений.Сбросить();

					КоммерческоеПредложениеПоставщикаОбъект = Документы.TK_КоммерческоеПредложениеОтПоставщика.СоздатьДокумент();

					Если ВыборкаКоммерческихПредложений.НайтиСледующий(
						Новый Структура("ИдентификаторКоммерческогоПредложения", ДанныеКоммерческогоПредложения.id)) Тогда
						Если ВыборкаКоммерческихПредложений.ДатаКоммерческогоПредложения
							= ДанныеКоммерческогоПредложения.updatedAt Тогда
							Продолжить;
						Иначе
							КоммерческоеПредложениеПоставщикаОбъект = ВыборкаКоммерческихПредложений.КоммерческоеПредложениеПоставщика.ПолучитьОбъект();
						КонецЕсли;
					КонецЕсли;

					ДанныеКЗаписи = Новый Структура;
					ДанныеКЗаписи.Вставить("КоммерческоеПредложениеПоставщикаОбъект",
						КоммерческоеПредложениеПоставщикаОбъект);
					ДанныеКЗаписи.Вставить("ДанныеКоммерческогоПредложения", ДанныеКоммерческогоПредложения);
					ДанныеКЗаписи.Вставить("ЗапросЦенПоставщикам", ВыборкаИдентификатор.ЗапросЦенПоставщикам);
					ДанныеКЗаписи.Вставить("Организация", ВыборкаИдентификатор.Организация);
					ДанныеКЗаписи.Вставить("Валюта", ВыборкаИдентификатор.Валюта);

					ДанныеКоммерческихПредложенийКЗаписи.Добавить(ДанныеКЗаписи);

				КонецЦикла;

			КонецЦикла;

		КонецЦикла;

	КонецЦикла;

	ВыборкаКонтрагентов = ВыборкаКонтрагентовПоДаннымКоммерческихПредложений(ДанныеКоммерческихПредложенийКЗаписи);
	Для Каждого ДанныеКоммерческогоПредложенияКЗаписи Из ДанныеКоммерческихПредложенийКЗаписи Цикл
		НачатьТранзакцию();
		Попытка
			ЗаполнитьИПровестиКоммерческоеПредложениеПоставщика(ДанныеКоммерческогоПредложенияКЗаписи,
				ВыборкаКонтрагентов);
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ЗаписьЖурналаРегистрации("Загрузка коммерческого предложения от поставщика из Teklifo",
				УровеньЖурналаРегистрации.Ошибка, , , ОбработкаОшибок.ПодробноеПредставлениеОшибки(
				ИнформацияОбОшибке()));
		КонецПопытки;
	КонецЦикла;

КонецПроцедуры

Функция КоммерческиеПредложенияПоставщиковПоОткрытымЗапросамЦен()

	Запрос = Новый Запрос("ВЫБРАТЬ
						  |	ЗапросыЦенПоставщикам.Документ КАК ЗапросЦенПоставщикам,
						  |	ЗапросыЦенПоставщикам.Идентификатор КАК Идентификатор,
						  |	ЗапросыЦенПоставщикам.ИдентификаторВерсии КАК ИдентификаторВерсии
						  |ПОМЕСТИТЬ ВТ_ОткрытыеЗапросыЦен
						  |ИЗ
						  |	РегистрСведений.TK_ЗапросыЦенПоставщикамНаTeklifo КАК ЗапросыЦенПоставщикам
						  |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.TK_СтатусыПубликацииЗапросовЦенПоставщикамНаTeklifo.СрезПоследних КАК
						  |			СтатусыПубликацииЗапросовЦенПоставщикам
						  |		ПО (ЗапросыЦенПоставщикам.Документ = СтатусыПубликацииЗапросовЦенПоставщикам.Документ)
						  |ГДЕ
						  |	ЗапросыЦенПоставщикам.Документ.КонечнаяДатаСбораПредложений >= &ТекущаяДата
						  |	И ЗапросыЦенПоставщикам.ЭтоАктуальнаяВерсия
						  |	И
						  |		СтатусыПубликацииЗапросовЦенПоставщикам.Статус = ЗНАЧЕНИЕ(Перечисление.TK_СтатусыПубликацииДокументовНаTeklifo.Опубликован)
						  |;
						  |
						  |////////////////////////////////////////////////////////////////////////////////
						  |ВЫБРАТЬ
						  |	ВТ_ОткрытыеЗапросыЦен.ЗапросЦенПоставщикам.Организация КАК Организация,
						  |	ВТ_ОткрытыеЗапросыЦен.ЗапросЦенПоставщикам КАК ЗапросЦенПоставщикам,
						  |	ВТ_ОткрытыеЗапросыЦен.Идентификатор КАК Идентификатор,
						  |	КоммерческоеПредложениеОтПоставщика.Ссылка КАК КоммерческоеПредложениеПоставщика,
						  |	КоммерческоеПредложениеОтПоставщика.Идентификатор КАК ИдентификаторКоммерческогоПредложения,
						  |	КоммерческоеПредложениеОтПоставщика.Дата КАК ДатаКоммерческогоПредложения,
						  |	ВТ_ОткрытыеЗапросыЦен.ЗапросЦенПоставщикам.Валюта КАК Валюта
						  |ИЗ
						  |	ВТ_ОткрытыеЗапросыЦен КАК ВТ_ОткрытыеЗапросыЦен
						  |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.TK_КоммерческоеПредложениеОтПоставщика КАК КоммерческоеПредложениеОтПоставщика
						  |		ПО (ВТ_ОткрытыеЗапросыЦен.ЗапросЦенПоставщикам = КоммерческоеПредложениеОтПоставщика.ЗапросЦенПоставщикам)
						  |		И (ВТ_ОткрытыеЗапросыЦен.Идентификатор = КоммерческоеПредложениеОтПоставщика.ИдентификаторЗапроса)
						  |		И (ВТ_ОткрытыеЗапросыЦен.ИдентификаторВерсии = КоммерческоеПредложениеОтПоставщика.ИдентификаторВерсииЗапроса)
						  |ИТОГИ
						  |ПО
						  |	Организация,
						  |	ЗапросЦенПоставщикам,
						  |	Идентификатор");

	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());

	Возврат Запрос.Выполнить();

КонецФункции

Функция ВыборкаКонтрагентовПоДаннымКоммерческихПредложений(ДанныеКоммерческихПредложенийКЗаписи)

	ТаблицаКонтрагентов = НоваяТаблицаКонтрагентовTeklifo();

	ЗаполнитьТаблицуКонтрагентовПоДаннымКоммерческихПредложений(ТаблицаКонтрагентов,
		ДанныеКоммерческихПредложенийКЗаписи);

	Запрос = Новый Запрос("ВЫБРАТЬ
						  |	ТаблицаКонтрагентов.ИдентификаторTeklifo,
						  |	ТаблицаКонтрагентов.ИНН
						  |ПОМЕСТИТЬ ВТ_ТаблицаКонтрагентов
						  |ИЗ
						  |	&ТаблицаКонтрагентов КАК ТаблицаКонтрагентов
						  |;
						  |
						  |////////////////////////////////////////////////////////////////////////////////
						  |ВЫБРАТЬ
						  |	ВТ_ТаблицаКонтрагентов.ИдентификаторTeklifo КАК Идентификатор,
						  |	МАКСИМУМ(Контрагенты.Ссылка) КАК Контрагент
						  |ПОМЕСТИТЬ ВТ_Контрагенты
						  |ИЗ
						  |	ВТ_ТаблицаКонтрагентов КАК ВТ_ТаблицаКонтрагентов
						  |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
						  |		ПО Контрагенты.TK_ИдентификаторTeklifo = ВТ_ТаблицаКонтрагентов.ИдентификаторTeklifo
						  |		ИЛИ Контрагенты.ИНН = ВТ_ТаблицаКонтрагентов.ИНН
						  |СГРУППИРОВАТЬ ПО
						  |	ВТ_ТаблицаКонтрагентов.ИдентификаторTeklifo
						  |;
						  |
						  |////////////////////////////////////////////////////////////////////////////////
						  |ВЫБРАТЬ
						  |	ВТ_Контрагенты.Идентификатор КАК Идентификатор,
						  |	ВТ_Контрагенты.Контрагент КАК Контрагент,
						  |	ВТ_Контрагенты.Контрагент.Партнер КАК Партнер
						  |ИЗ
						  |	ВТ_Контрагенты КАК ВТ_Контрагенты");
	Запрос.УстановитьПараметр("ТаблицаКонтрагентов", ТаблицаКонтрагентов);

	Возврат Запрос.Выполнить().Выбрать();

КонецФункции

Функция НоваяТаблицаКонтрагентовTeklifo()

	ТаблицаКонтрагентов = Новый ТаблицаЗначений;
	ТаблицаКонтрагентов.Колонки.Добавить("ИдентификаторTeklifo", Новый ОписаниеТипов("Строка", , , ,
		Новый КвалификаторыСтроки(100)));
	ТаблицаКонтрагентов.Колонки.Добавить("ИНН", Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(10)));

	Возврат ТаблицаКонтрагентов

КонецФункции

Процедура ЗаполнитьТаблицуКонтрагентовПоДаннымКоммерческихПредложений(ТаблицаКонтрагентов,
	ДанныеКоммерческихПредложенийКЗаписи)

	Для Каждого ДанныеКЗаписи Из ДанныеКоммерческихПредложенийКЗаписи Цикл
		СтрокаТабличнойЧасти = ТаблицаКонтрагентов.Добавить();
		СтрокаТабличнойЧасти.ИдентификаторTeklifo = ДанныеКЗаписи.ДанныеКоммерческогоПредложения.company.id;
		СтрокаТабличнойЧасти.ИНН = ДанныеКЗаписи.ДанныеКоммерческогоПредложения.company.tin;
	КонецЦикла;

	ТаблицаКонтрагентов.Свернуть("ИдентификаторTeklifo, ИНН");

КонецПроцедуры

Функция ЗаполнитьИПровестиКоммерческоеПредложениеПоставщика(ДанныеКоммерческогоПредложенияКЗаписи, ВыборкаКонтрагентов)

	ДокументОбъект = ДанныеКоммерческогоПредложенияКЗаписи.КоммерческоеПредложениеПоставщикаОбъект; // ДокументОбъект.TK_КоммерческоеПредложениеОтПоставщика
	ДанныеКоммерческогоПредложения = ДанныеКоммерческогоПредложенияКЗаписи.ДанныеКоммерческогоПредложения;

	ДокументОбъект.Дата = ДанныеКоммерческогоПредложения.updatedAt;
	ДокументОбъект.УстановитьНовыйНомер();

	ДокументОбъект.Идентификатор = ДанныеКоммерческогоПредложения.id;
	ДокументОбъект.ИдентификаторЗапроса = ДанныеКоммерческогоПредложения.rfq.id;
	ДокументОбъект.ИдентификаторВерсииЗапроса = ДанныеКоммерческогоПредложения.rfq.versionId;
	ДокументОбъект.Организация = ДанныеКоммерческогоПредложенияКЗаписи.Организация;
	ДокументОбъект.ЗапросЦенПоставщикам = ДанныеКоммерческогоПредложенияКЗаписи.ЗапросЦенПоставщикам;
	ДокументОбъект.Валюта = ДанныеКоммерческогоПредложенияКЗаписи.Валюта;
	ДокументОбъект.ТекстовоеОписание = ДанныеКоммерческогоПредложения.description;

	ВыборкаКонтрагентов.Сбросить();
	Если ВыборкаКонтрагентов.НайтиСледующий(Новый Структура("Идентификатор",
		ДанныеКоммерческогоПредложения.company.id)) Тогда
		ДокументОбъект.Контрагент = ВыборкаКонтрагентов.Контрагент;
		ДокументОбъект.Партнер = ВыборкаКонтрагентов.Партнер;
	Иначе
		ПартнерОбъект = Справочники.Партнеры.СоздатьЭлемент();
		КонтрагентОбъект = Справочники.Контрагенты.СоздатьЭлемент();

		ДанныеЗаполненияПартнераКонтрагента = Новый Структура;
		ДанныеЗаполненияПартнераКонтрагента.Вставить("ПартнерОбъект", ПартнерОбъект);
		ДанныеЗаполненияПартнераКонтрагента.Вставить("КонтрагентОбъект", КонтрагентОбъект);
		ДанныеЗаполненияПартнераКонтрагента.Вставить("ЭтоПоставщик", Истина);
		ДанныеЗаполненияПартнераКонтрагента.Вставить("ЭтоКлиент", Ложь);

		ПартнерИКонтрагент = ЗаполнитьИЗаписатьКонтрагентаИПартнераПоДаннымTeklifo(ДанныеЗаполненияПартнераКонтрагента);
		ДокументОбъект.Контрагент = ПартнерИКонтрагент.Контрагент;
		ДокументОбъект.Партнер = ПартнерИКонтрагент.Партнер;
	КонецЕсли;

	ДокументОбъект.Товары.Очистить();

	Для Каждого ДанныеПозиции Из ДанныеКоммерческогоПредложения.items Цикл

		СтрокаТабличнойЧасти = ДокументОбъект.Товары.Добавить();

		СтрокаТабличнойЧасти.ИдентификаторСтрокиЗапроса = ДанныеПозиции.id;

		Если ЗначениеЗаполнено(ДанныеПозиции.product) И ЗначениеЗаполнено(ДанныеПозиции.product.externalId)
			И СтроковыеФункцииКлиентСервер.ЭтоУникальныйИдентификатор(ДанныеПозиции.product.externalId) Тогда
			СтрокаТабличнойЧасти.Номенклатура = Справочники.Номенклатура.ПолучитьСсылку(
				Новый УникальныйИдентификатор(ДанныеПозиции.product.externalId));
		КонецЕсли;

		СтрокаТабличнойЧасти.НоменклатураТекстом = ДанныеПозиции.productName;
		СтрокаТабличнойЧасти.Количество = ДанныеПозиции.quantity;
		СтрокаТабличнойЧасти.Цена = ДанныеПозиции.price;
		СтрокаТабличнойЧасти.Сумма = ДанныеПозиции.amount;
		СтрокаТабличнойЧасти.СтавкаНДС = СтавкаНДСИзЗначенияTeklifo(ДанныеПозиции.vatRate);
		СтрокаТабличнойЧасти.СуммаНДС = ДанныеПозиции.vatAmount;
		СтрокаТабличнойЧасти.ЦенаВключаетНДС = ДанныеПозиции.vatIncluded;
		СтрокаТабличнойЧасти.СуммаСНДС = ДанныеПозиции.amountWithVat;
		СтрокаТабличнойЧасти.ДатаДоставки = ДанныеПозиции.deliveryDate;
		СтрокаТабличнойЧасти.КомментарийОтПоставщика = ДанныеПозиции.comment;
		СтрокаТабличнойЧасти.Пропущено = ДанныеПозиции.skip;

	КонецЦикла;

	ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);

	Возврат ДокументОбъект.Ссылка;

КонецФункции

Функция СтавкаНДСПоЧисловойСтавке(Ставка)

	СтавкаНДС = Справочники.СтавкиНДС.НайтиПоРеквизиту("Ставка", Ставка);

	Если Не ЗначениеЗаполнено(СтавкаНДС) Тогда
		СтавкаНДСОбъект = УчетНДСРФВызовСервера.СтавкаНДСПоЗначениюПеречисления(
			Перечисления.СтавкиНДС.НДС18, Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС);
		Если СтавкаНДСОбъект.Пустая() Тогда
			СтавкаНДСОбъект = Справочники.СтавкиНДС.СоздатьЭлемент();
		Иначе
			СтавкаНДСОбъект = СтавкаНДСОбъект.ПолучитьОбъект();
		КонецЕсли;

		СтавкаНДСОбъект.Наименование = Ставка + "%";
		СтавкаНДСОбъект.Ставка = Ставка;
		СтавкаНДСОбъект.Страна = Справочники.СтраныМира.Россия;

		Если Ставка = 18 Тогда
			СтавкаНДСОбъект.ПеречислениеСтавкаНДС = Перечисления.СтавкиНДС.НДС18;
		ИначеЕсли Ставка = 20 Тогда
			СтавкаНДСОбъект.ПеречислениеСтавкаНДС = Перечисления.СтавкиНДС.НДС20;
		Иначе
			СтавкаНДСОбъект.ПеречислениеСтавкаНДС = Перечисления.СтавкиНДС.НДС0;
		КонецЕсли;

		СтавкаНДСОбъект.ТипыНалогообложенияНДС.Очистить();

		СтавкаНДСОбъект.ОбменДанными.Загрузка = Истина;
		СтавкаНДСОбъект.Записать();

	КонецЕсли;

	Возврат СтавкаНДС;

КонецФункции

#КонецОбласти