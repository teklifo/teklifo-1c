#Область ПрограммныйИнтерфейс

// Получить список доступных организаций.
// 
// Возвращаемое значение:
//  Массив Из СправочникСсылка.Организации - Получить список доступных организаций
Функция ПолучитьСписокДоступныхОрганизаций() Экспорт

	Запрос = Новый Запрос("ВЫБРАТЬ
						  |	TK_СоответствияОрганизаций.Организация
						  |ИЗ
						  |	РегистрСведений.TK_СоответствияОрганизаций КАК TK_СоответствияОрганизаций
						  |СГРУППИРОВАТЬ ПО
						  |	TK_СоответствияОрганизаций.Организация");

	Результат = Запрос.Выполнить().Выгрузить();

	Возврат Результат.ВыгрузитьКолонку("Организация");

КонецФункции

// Получить внешнюю ссылку на документ заказа цен поставщикам.
// 
// Параметры:
//  СсылкаНаЗаказ - ДокументСсылка.TK_ЗапросЦенПоставщикам - Ссылка на заказ
// 
// Возвращаемое значение:
//  Строка - Получить внешнюю ссылку на документ заказа цен поставщикам
Функция ПолучитьВнешнююСсылкуНаДокументЗаказаЦенПоставщикам(СсылкаНаЗаказ) Экспорт

	НомерДокумента = ПолучитьДанныеДокумента(СсылкаНаЗаказ).number;

	СсылкаНаДокумент = "";
	Если ЗначениеЗаполнено(НомерДокумента) Тогда
		СсылкаНаДокумент = СтрШаблон(ПолучитьШаблонСсылки(), НомерДокумента);
	КонецЕсли;

	Возврат СсылкаНаДокумент;

КонецФункции

// Получить ссылку на документ для запуска.
// 
// Параметры:
//  СсылкаНаЗаказ - ДокументСсылка.TK_ЗапросЦенПоставщикам - Ссылка на заказ
// 
// Возвращаемое значение:
//  Строка - Получить ссылку на документ для запуска
Функция ПолучитьСсылкуНаДокумент_ДляЗапуска(СсылкаНаЗаказ) Экспорт

	ДанныеПоДокументу = ПолучитьДанныеДокумента(СсылкаНаЗаказ);

	ШаблонСсылки = ПолучитьШаблонСсылки();

	СсылкаДляЗапуска = СтрШаблон(ШаблонСсылки, ДанныеПоДокументу.ВнешнийID);

	Возврат СсылкаДляЗапуска;

КонецФункции

// Получить данные документа.
// 
// Параметры:
//  СсылкаНаЗаказ - ДокументСсылка.TK_ЗапросЦенПоставщикам - Ссылка на заказ
// 
// Возвращаемое значение:
//  Структура - Получить данные документа:
// * ВнешнийID - Строка
// * number - Строка
Функция ПолучитьДанныеДокумента(СсылкаНаЗаказ) Экспорт
	Запрос = Новый Запрос("ВЫБРАТЬ
						  |	TK_СоответствияДокументовЗапросаЦенПоставщикам.ВнешнийID,
						  |	TK_СоответствияДокументовЗапросаЦенПоставщикам.number
						  |ИЗ
						  |	РегистрСведений.TK_СоответствияДокументовЗапросаЦенПоставщикам КАК TK_СоответствияДокументовЗапросаЦенПоставщикам
						  |ГДЕ
						  |	TK_СоответствияДокументовЗапросаЦенПоставщикам.ДокументЗапроса = &Ссылка");
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаЗаказ);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();

	СтруктураДанных = Новый Структура("ВнешнийID, number", "", "");
	Если Выборка.Количество() > 0 Тогда
		СтруктураДанных.ВнешнийID = Выборка.ВнешнийID;
		СтруктураДанных.number = Выборка.number;
	КонецЕсли;

	Возврат СтруктураДанных;

КонецФункции

// Получить данные документа запроса цен от клиента по внешнему ID.
// 
// Параметры:
//  ИдентификаторВерсииЗапросаКлиенту - Строка - Version id
// 
// Возвращаемое значение:
//  Структура - Получить данные документа запроса цен от клиента по внешнему ID:
// * ВнешнийID - Строка
// * number - Строка
// * ДокументЗапроса - ДокументСсылка.TK_ЗапросЦенОтКлиента
Функция ПолучитьДанныеДокументаЗапросаЦенОтКлиентаПоВнешнемуID(ИдентификаторВерсииЗапросаКлиенту = "") Экспорт
	Запрос = Новый Запрос("ВЫБРАТЬ
						  |	TK_СоответствияДокументовЗапросаЦенОтКлиентов.ВнешнийID,
						  |	TK_СоответствияДокументовЗапросаЦенОтКлиентов.number,
						  |	TK_СоответствияДокументовЗапросаЦенОтКлиентов.ДокументЗапроса
						  |ИЗ
						  |	РегистрСведений.TK_СоответствияДокументовЗапросаЦенОтКлиентов КАК TK_СоответствияДокументовЗапросаЦенОтКлиентов
						  |ГДЕ
						  |	TK_СоответствияДокументовЗапросаЦенОтКлиентов.versionId = &versionId");
	Запрос.УстановитьПараметр("versionId", ИдентификаторВерсииЗапросаКлиенту);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();

	СтруктураДанных = Новый Структура("ВнешнийID, number, ДокументЗапроса", "", "",
		Документы.TK_ЗапросЦенОтКлиента.ПустаяСсылка());
	Если Выборка.Количество() > 0 Тогда
		СтруктураДанных.ВнешнийID = Выборка.ВнешнийID;
		СтруктураДанных.number = Выборка.number;
		СтруктураДанных.ДокументЗапроса = Выборка.ДокументЗапроса;
	КонецЕсли;

	Возврат СтруктураДанных;

КонецФункции

// Получить статус документа заказа цен поставщику.
// 
// Параметры:
//  СсылкаНаЗаказ - ДокументСсылка.TK_ЗапросЦенПоставщикам - Ссылка на заказ
// 
// Возвращаемое значение:
// 	ПеречислениеСсылка.TK_СтатусыПубликацииЗапросовЦен 
Функция ПолучитьСтатусДокументаЗаказаЦенПоставщику(СсылкаНаЗаказ) Экспорт

	Запрос = Новый Запрос("ВЫБРАТЬ
						  |	TK_СтатусыДокументовИнтеграцииСрезПоследних.СтатусДокумента
						  |ИЗ
						  |	РегистрСведений.TK_СтатусыДокументовИнтеграции.СрезПоследних(, Документ = &СсылкаНаЗаказ) КАК
						  |		TK_СтатусыДокументовИнтеграцииСрезПоследних");
	Запрос.УстановитьПараметр("СсылкаНаЗаказ", СсылкаНаЗаказ);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();

	Возврат Выборка.СтатусДокумента;

КонецФункции

// Установить статус документа заказа цен поставщику.
// 
// Параметры:
//  СсылкаНаЗаказ - ДокументСсылка.TK_ЗапросЦенПоставщикам - Ссылка на заказ
//  Статус - ПеречислениеСсылка.TK_СтатусыПубликацииЗапросовЦен - Статус
Процедура УстановитьСтатусДокументаЗаказаЦенПоставщику(СсылкаНаЗаказ, Статус) Экспорт

	МенеджерЗаписи = РегистрыСведений.TK_СтатусыДокументовИнтеграции.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Период = ТекущаяДатаСеанса();
	МенеджерЗаписи.Документ = СсылкаНаЗаказ;
	МенеджерЗаписи.СтатусДокумента = Статус;
	МенеджерЗаписи.Записать();

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьШаблонСсылки()
	Возврат "https://teklifo.com/rfq/%1";
КонецФункции

#КонецОбласти