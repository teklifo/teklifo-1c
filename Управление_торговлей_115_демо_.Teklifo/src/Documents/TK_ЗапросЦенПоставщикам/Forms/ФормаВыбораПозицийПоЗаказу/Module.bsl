


#Область ОбработчикиСобытийФормы

// Код процедур и функций






&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ТекПараметрыФормы = ПолучитьПараметрыФормы();
	
	Если ТекПараметрыФормы.Свойство("Ссылка") Тогда 
		Ссылка = ТекПараметрыФормы.Ссылка;
		ИнициализироватьМатрицуДанных();
	Иначе
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти



#Область ОбработчикиСобытийЭлементовТаблицыФормыМатрицаДанных //<ИмяТаблицыФормы>

 &НаКлиенте
Процедура МатрицаДанныхПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, ЭтоГруппа, Параметр)
	Отказ = Истина;
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормыПодобранныеПозиции
&НаКлиенте
Процедура ПодобранныеПозицииПередУдалением(Элемент, Отказ)
	ТекДанные = Элементы.ПодобранныеПозиции.ТекущиеДанные;
	IDКолонки = УникИдентификатор(ТекДанные.КоммерческоеПредложение);
	
	Если Элементы.Найти("ГруппаПартнер_" + IDКолонки) = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НайденныеСтроки = МатрицаДанных.НайтиСтроки(Новый Структура("Номенклатура",ТекДанные.Номенклатура));
	
	Для Каждого ЭлементСтроки Из НайденныеСтроки Цикл
		ЭлементСтроки["Выбран_" + IDКолонки] = Ложь;
	КонецЦикла;
	
КонецПроцедуры


&НаКлиенте
Процедура ПодобранныеПозицииПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, ЭтоГруппа, Параметр)
	Отказ = Истина;
КонецПроцедуры
#КонецОбласти


#Область ОбработчикиКомандФормы

// Код процедур и функций
&НаКлиенте
Процедура КомандаВперед(Команда)
	КомандаВпередНаСервере();
КонецПроцедуры


&НаКлиенте
Процедура КомандаНазад(Команда)
	КомандаНазадНаСервере();
КонецПроцедуры


&НаКлиенте
Процедура КомандаСоздатьЗаказыПоставщикам(Команда)
    МассивЗаказов = ЗаказыПоставщикамНаСервере();
    
    Для Каждого АдресДокументаЗаказа Из МассивЗаказов Цикл    	 
    	//@skip-check use-non-recommended-method
    	Форма = ПолучитьФорму("Документ.ЗаказПоставщику.ФормаОбъекта", , , Истина, , );
		ДанныеФормы = Форма.Объект; 
		ЗаполнитьДокументНаСервере(ДанныеФормы,АдресДокументаЗаказа); 
		КопироватьДанныеФормы(ДанныеФормы, Форма.Объект); 
		Форма.Открыть();
    КонецЦикла; 

    Закрыть();

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Получить параметры формы.
// 
// Возвращаемое значение:
//  ДанныеФормыСтруктура - Получить параметры формы:
// * Ссылка - ДокументСсылка.TK_ЗапросЦенПоставщикам 
&НаСервере
Функция ПолучитьПараметрыФормы()
	Возврат Параметры;
КонецФункции

&НаСервере
Процедура УстановитьДоступностьКоманды(ИмяКоманды,ДоступностьКоманды)
	Элементы[ИмяКоманды].Доступность = ДоступностьКоманды;
КонецПроцедуры


&НаСервере
Процедура ИнициализироватьМатрицуДанных()
	МатрицаДанных.Очистить();
	УдалитьЛишниеЭлементы();
	ЗагруженныеКП.Очистить();
	
	УсловноеОформление.Элементы.Очистить();
	
	СтруктураДанных = ДанныеПредложенийПоЗапросу();
	
	
	ВыборкаПартнеры = СтруктураДанных.ПартнерыИКП.Выбрать();
	
	
	Пока ВыборкаПартнеры.Следующий() Цикл
		СгенерироватьКолонкиПредложений(ВыборкаПартнеры);
	КонецЦикла;
	
	ВыборкаДанныхЗапроса = СтруктураДанных.ДанныеЗапроса.Выбрать();
	
	ВыборкаПредложений   = СтруктураДанных.ДанныеПредложений.Выбрать();
	
	Пока ВыборкаДанныхЗапроса.Следующий() Цикл
		СтрокаМатрицы = МатрицаДанных.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаМатрицы,ВыборкаДанныхЗапроса);
		
		НоменклатураНайдена = Ложь;
		Пока ВыборкаПредложений.НайтиСледующий(ВыборкаДанныхЗапроса.Номенклатура,"Номенклатура" ) Цикл
			GUIDДляКолонки = УникИдентификатор(ВыборкаПредложений.КоммерческоеПредложение);
			СтрокаМатрицы["СуммаСНДС_" + GUIDДляКолонки] = ВыборкаПредложений.СуммаСНДСПредложено;
			СтрокаМатрицы["Количество_" + GUIDДляКолонки] = ВыборкаПредложений.КоличествоПредложено;
			СтрокаМатрицы["Цена_" + GUIDДляКолонки] = ВыборкаПредложений.ЦенаПредложено;
			СтрокаМатрицы["ДатаДоставки_" + GUIDДляКолонки] = ВыборкаПредложений.ДатаДоставкиПредложено;
			НоменклатураНайдена = Истина;
		КонецЦикла;
		
		Если Не НоменклатураНайдена Тогда
			Пока ВыборкаПредложений.НайтиСледующий(ВыборкаДанныхЗапроса.НоменклатураТекстом, "НоменклатураТекстом") Цикл
				GUIDДляКолонки = УникИдентификатор(ВыборкаПредложений.КоммерческоеПредложение);
				СтрокаМатрицы["СуммаСНДС_" + GUIDДляКолонки] = ВыборкаПредложений.СуммаСНДСПредложено;
				СтрокаМатрицы["Количество_" + GUIDДляКолонки] = ВыборкаПредложений.КоличествоПредложено;
				СтрокаМатрицы["Цена_" + GUIDДляКолонки] = ВыборкаПредложений.ЦенаПредложено;
				СтрокаМатрицы["ДатаДоставки_" + GUIDДляКолонки] = ВыборкаПредложений.ДатаДоставкиПредложено;
				НоменклатураНайдена = Истина;
			КонецЦикла;
		КонецЕсли;
		
		ВыборкаПредложений.Сбросить();
	КонецЦикла; 
	
	ЗаполнитьФлажки();
	
//	ДоступностьКоманды = ЗагруженныеКП.Количество()<> 0 И НомерСтраницы <> 0;
	УстановитьДоступностьКоманды("КомандаНазад",НомерСтраницы <> 0);
	УстановитьДоступностьКоманды("КомандаВперед",ЗагруженныеКП.Количество()<> 0);
	
КонецПроцедуры


&НаСервере
Процедура УдалитьЛишниеЭлементы()
	МассивУдаляеммыхРеквизитов = Новый Массив;
	Для Каждого Элемент Из ЗагруженныеКП Цикл
		ИДДляКолонки = УникИдентификатор(Элемент.КоммерческоеПредложение);

		НайденныйЭлемент = Элементы.Найти("ГруппаПартнер_" + ИДДляКолонки);

		Если НайденныйЭлемент <> Неопределено Тогда
			Элементы.Удалить(НайденныйЭлемент);
		КонецЕсли;
		
		НайденныйЭлемент = Элементы.Найти("ГруппаВыбранСумма_" + ИДДляКолонки);

		Если НайденныйЭлемент <> Неопределено Тогда
			Элементы.Удалить(НайденныйЭлемент);
		КонецЕсли;
		
		НайденныйЭлемент = Элементы.Найти("ГруппаКоличествоЦена_" + ИДДляКолонки);

		Если НайденныйЭлемент <> Неопределено Тогда
			Элементы.Удалить(НайденныйЭлемент);
		КонецЕсли;
		
		
		НайденныйЭлемент = Элементы.Найти("Выбран_" + ИДДляКолонки);

		Если НайденныйЭлемент <> Неопределено Тогда
			Элементы.Удалить(НайденныйЭлемент);
		КонецЕсли;
		
		НайденныйЭлемент = Элементы.Найти("СуммаСНДС_" + ИДДляКолонки);

		Если НайденныйЭлемент <> Неопределено Тогда
			Элементы.Удалить(НайденныйЭлемент);
		КонецЕсли;
		
		НайденныйЭлемент = Элементы.Найти("Количество_" + ИДДляКолонки);

		Если НайденныйЭлемент <> Неопределено Тогда
			Элементы.Удалить(НайденныйЭлемент);
		КонецЕсли;
		
		НайденныйЭлемент = Элементы.Найти("Цена_" + ИДДляКолонки);

		Если НайденныйЭлемент <> Неопределено Тогда
			Элементы.Удалить(НайденныйЭлемент);
		КонецЕсли;
		
		НайденныйЭлемент = Элементы.Найти("ДатаДоставки_" + ИДДляКолонки);

		Если НайденныйЭлемент <> Неопределено Тогда
			Элементы.Удалить(НайденныйЭлемент);
		КонецЕсли;
		

		МассивУдаляеммыхРеквизитов.Добавить("МатрицаДанных.Выбран_" + ИДДляКолонки);
		МассивУдаляеммыхРеквизитов.Добавить("МатрицаДанных.СуммаСНДС_" + ИДДляКолонки);
		МассивУдаляеммыхРеквизитов.Добавить("МатрицаДанных.Количество_" + ИДДляКолонки);
		МассивУдаляеммыхРеквизитов.Добавить("МатрицаДанных.Цена_" + ИДДляКолонки);
		МассивУдаляеммыхРеквизитов.Добавить("МатрицаДанных.ДатаДоставки_" + ИДДляКолонки);
	КонецЦикла;
	ИзменитьРеквизиты( , МассивУдаляеммыхРеквизитов);
КонецПроцедуры


&НаСервере
Процедура СгенерироватьКолонкиПредложений(ВыборкаПартнеры)
	МассивДобавляемыхРеквизитов = Новый Массив;

    СтрокаКП = ЗагруженныеКП.Добавить();
    СтрокаКП.КоммерческоеПредложение = ВыборкаПартнеры.КоммерческоеПредложение;

    ИДДляКолонки = УникИдентификатор(ВыборкаПартнеры.КоммерческоеПредложение);

    Если Элементы.Найти("ГруппаПартнер_" + ИДДляКолонки) <> Неопределено Тогда
    	Возврат;
    КонецЕсли;

	Группа = Элементы.Добавить("ГруппаПартнер_" + ИДДляКолонки, Тип("ГруппаФормы"),
		Элементы.МатрицаДанных);
	Группа.Вид = ВидГруппыФормы.ГруппаКолонок;
	Группа.Группировка = ГруппировкаКолонок.Вертикальная;

	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("Выбран_" + ИДДляКолонки,
		Новый ОписаниеТипов("Булево"), "МатрицаДанных", ""));

	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("СуммаСНДС_" + ИДДляКолонки,
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)), "МатрицаДанных", "Партнер"));

	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("Количество_" + ИДДляКолонки, Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)), "МатрицаДанных", ""));
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("Цена_" + ИДДляКолонки,
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)), "МатрицаДанных", ""));
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ДатаДоставки_" + ИДДляКолонки, Новый ОписаниеТипов("Дата", Новый КвалификаторыДаты(ЧастиДаты.Дата)),
		"МатрицаДанных", ""));
	ИзменитьРеквизиты(МассивДобавляемыхРеквизитов);

	ГруппаВыбранСумма = Элементы.Добавить("ГруппаВыбранСумма_" + ИДДляКолонки, Тип(
		"ГруппаФормы"), Группа);
	ГруппаВыбранСумма.Вид = ВидГруппыФормы.ГруппаКолонок;
	ГруппаВыбранСумма.Группировка = ГруппировкаКолонок.Горизонтальная;
	ГруппаКоличествоЦена = Элементы.Добавить("ГруппаКоличествоЦена_" + ИДДляКолонки, Тип(
		"ГруппаФормы"), Группа);
	ГруппаКоличествоЦена.Вид = ВидГруппыФормы.ГруппаКолонок;
	ГруппаКоличествоЦена.Группировка = ГруппировкаКолонок.Горизонтальная;
	НоваяКолонка = Элементы.Добавить("Выбран_" + ИДДляКолонки, Тип("ПолеФормы"),
		ГруппаВыбранСумма);
	НоваяКолонка.Заголовок = "";
	НоваяКолонка.ПутьКДанным = "МатрицаДанных." + "Выбран_" + ИДДляКолонки;
	НоваяКолонка.Вид = ВидПоляФормы.ПолеФлажка;
	НоваяКолонка.ОтображатьВШапке = Ложь;
	НоваяКолонка.УстановитьДействие("ПриИзменении", "ВыполнитьВыборПозиции");
	
	НоваяКолонка = Элементы.Добавить("СуммаСНДС_" + ИДДляКолонки, Тип("ПолеФормы"),
		ГруппаВыбранСумма);
	НоваяКолонка.Заголовок = Строка(ВыборкаПартнеры.Партнер);
	НоваяКолонка.ПутьКДанным = "МатрицаДанных." + "СуммаСНДС_" + ИДДляКолонки;
	НоваяКолонка.Вид = ВидПоляФормы.ПолеВвода;
	НоваяКолонка.ТолькоПросмотр = Истина;
	НоваяКолонка = Элементы.Добавить("Количество_" + ИДДляКолонки, Тип("ПолеФормы"),
		ГруппаКоличествоЦена);
	НоваяКолонка.Заголовок = "Количество";
	НоваяКолонка.ПутьКДанным = "МатрицаДанных." + "Количество_" + ИДДляКолонки;
	НоваяКолонка.Вид = ВидПоляФормы.ПолеВвода;
	НоваяКолонка.ТолькоПросмотр = Истина;

	НоваяКолонка = Элементы.Добавить("Цена_" + ИДДляКолонки, Тип("ПолеФормы"),
		ГруппаКоличествоЦена);
	НоваяКолонка.Заголовок = "Цена";
	НоваяКолонка.ПутьКДанным = "МатрицаДанных." + "Цена_" + ИДДляКолонки;
	НоваяКолонка.Вид = ВидПоляФормы.ПолеВвода;
	НоваяКолонка.ТолькоПросмотр = Истина;

	НоваяКолонка = Элементы.Добавить("ДатаДоставки_" + ИДДляКолонки, Тип("ПолеФормы"),
		Группа);
	НоваяКолонка.Заголовок = "Дата доставки";
	НоваяКолонка.ПутьКДанным = "МатрицаДанных." + "ДатаДоставки_" + ИДДляКолонки;
	НоваяКолонка.Вид = ВидПоляФормы.ПолеВвода;
	НоваяКолонка.ТолькоПросмотр = Истина;
	
	УстановитьУсловноеОформление(ИДДляКолонки);
	
КонецПроцедуры



&НаСервере
Процедура УстановитьУсловноеОформление(ИДДляКолонки)
	
	
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	
	ОтборЭлемента = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("МатрицаДанных.Выбран_" + ИДДляКолонки);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	ОтборЭлемента.Использование = Истина;	
	
	ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();    
    ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("Цена_" + ИДДляКолонки);
    
    ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();    
    ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("Количество_" + ИДДляКолонки);
    
    ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();    
    ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("ДатаДоставки_" + ИДДляКолонки);
    
    ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();    
    ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("СуммаСНДС_" + ИДДляКолонки);
    
    ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();    
    ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("Выбран_" + ИДДляКолонки);
    
 
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.СветлоЗеленый);
	ЭлементОформления.Использование = Истина;
	
КонецПроцедуры


&НаСервере
Процедура ЗаполнитьФлажки()
	Для Каждого ТекДанные Из ПодобранныеПозиции Цикл
		IDКолонки = УникИдентификатор(ТекДанные.КоммерческоеПредложение);

		Если Элементы.Найти("ГруппаПартнер_" + IDКолонки) = Неопределено Тогда
			Продолжить
		КонецЕсли;

		НайденныеСтроки = МатрицаДанных.НайтиСтроки(Новый Структура("Номенклатура", ТекДанные.Номенклатура));

		Для Каждого ЭлементСтроки Из НайденныеСтроки Цикл
			ЭлементСтроки["Выбран_" + IDКолонки] = Истина;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры


&НаКлиенте
Процедура ВыполнитьВыборПозиции(Элемент)
	ТекДанные = Элементы.МатрицаДанных.ТекущиеДанные;
	
	ЗначениеВыбрано = ТекДанные[Элемент.Имя];
	
	IDКолонки = СтрЗаменить(Элемент.Имя,"Выбран_","");
	
	КоммерческоеПредложение = ПолучитьКППоID(IDКолонки);
	
	НайденныеСтроки = ПодобранныеПозиции.НайтиСтроки(Новый Структура("Номенклатура,КоммерческоеПредложение",ТекДанные.Номенклатура,КоммерческоеПредложение));
	
	Если НайденныеСтроки.Количество() = 0 Тогда
		СтрокаПодобранныеПозиции = ПодобранныеПозиции.Добавить();
		СтрокаПодобранныеПозиции.Номенклатура            = ТекДанные.Номенклатура;
		СтрокаПодобранныеПозиции.КоммерческоеПредложение = КоммерческоеПредложение;
		СтрокаПодобранныеПозиции.Партнер                 = ОбщегоНазначенияУТВызовСервера.ЗначениеРеквизитаОбъекта(КоммерческоеПредложение,
			"Партнер");
		СтрокаПодобранныеПозиции.Количество              = ТекДанные["Количество_" + IDКолонки];
		СтрокаПодобранныеПозиции.Цена                    = ТекДанные["Цена_" + IDКолонки];
		СтрокаПодобранныеПозиции.ДатаДоставки            = ТекДанные["ДатаДоставки_" + IDКолонки];
	ИначеЕсли Не ЗначениеВыбрано И НайденныеСтроки.Количество() > 0 Тогда
		 Для Каждого ЭлементСтроки Из НайденныеСтроки Цикл
		 	ПодобранныеПозиции.Удалить(ЭлементСтроки);
		 КонецЦикла;		 
	КонецЕсли;
	
	
	
	
КонецПроцедуры



&НаСервере
Функция ПолучитьКППоID(IDКолонки)
	Возврат Документы.TK_КоммерческоеПредложениеОтПоставщика.ПолучитьСсылку(Новый УникальныйИдентификатор(ВернутьПробелыGUID(IDКолонки)));
КонецФункции


// Вернуть пробелы GUID.
// 
// Параметры:
//  Идентификатор - Строка - ИД
// 
// Возвращаемое значение:
//  Строка - Вернуть пробелы GUID
&НаСервере
Функция ВернутьПробелыGUID(Идентификатор) 
    возврат  Сред(Идентификатор,1,8)+"-"+Сред(Идентификатор,9,4)+"-"+Сред(Идентификатор,13,4)+"-"+Сред(Идентификатор,17,4)+"-"+Сред(Идентификатор,21,12);
КонецФункции // ВернутьПробелыGUID()



// Уник идентификатор.
// 
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка.TK_КоммерческоеПредложениеОтПоставщика - Ссылка на объект
// 
// Возвращаемое значение:
//  Строка - Уник идентификатор
&НаСервере
Функция УникИдентификатор(СсылкаНаОбъект) 
	//попытка сделана чтобы не вылетали при ошибках в базе 1С, например когда 
	//в регистрах регистратор = неопределено NULL и тд...
	УникальныйКод = "";
	Попытка
		Если НЕ СсылкаНаОбъект.Пустая() Тогда 
			УникальныйКод = СсылкаНаОбъект.УникальныйИдентификатор();
		    УникальныйКод = СтрЗаменить(УникальныйКод,"-","");
		КонецЕсли;
	Исключение
		УникальныйКод = "";
	КонецПопытки;
	Возврат УникальныйКод;
КонецФункции // УникИдентификатор(СсылкаНаОбъект)()


&НаСервере
Функция ДанныеПредложенийПоЗапросу()
	Запрос = Новый Запрос(СтрШаблон("ВЫБРАТЬ
	|	TK_ЗапросЦенПоставщикамТовары.Номенклатура КАК Номенклатура,
	|	TK_ЗапросЦенПоставщикамТовары.НоменклатураТекстом КАК НоменклатураТекстом,
	|	TK_ЗапросЦенПоставщикамТовары.Количество КАК Количество,
	|	TK_ЗапросЦенПоставщикамТовары.МаксимальнаяЦена КАК МаксимальнаяЦена,
	|	TK_ЗапросЦенПоставщикамТовары.ДатаДоставки КАК ДатаДоставки,
	|	TK_ЗапросЦенПоставщикамТовары.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	TK_ЗапросЦенПоставщикамТовары.НомерСтроки
	|ПОМЕСТИТЬ ДанныеЗапросаЦен
	|ИЗ
	|	Документ.TK_ЗапросЦенПоставщикам.Товары КАК TK_ЗапросЦенПоставщикамТовары
	|ГДЕ
	|	TK_ЗапросЦенПоставщикамТовары.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	TK_ДанныеКоммерческихПредложенийОтПоставщикаСрезПоследних.Регистратор КАК КоммерческоеПредложение,
	|	TK_ДанныеКоммерческихПредложенийОтПоставщикаСрезПоследних.ИдентификаторВерсииЗапроса КАК ИдентификаторВерсииЗапроса,
	|	TK_ДанныеКоммерческихПредложенийОтПоставщикаСрезПоследних.ЗапросЦенПоставщикам КАК ЗапросЦенПоставщикам,
	|	TK_ДанныеКоммерческихПредложенийОтПоставщикаСрезПоследних.Партнер КАК Партнер,
	|	ДанныеЗапросаЦен.Номенклатура КАК Номенклатура,
	|	ДанныеЗапросаЦен.НоменклатураТекстом КАК НоменклатураТекстом,
	|	TK_ДанныеКоммерческихПредложенийОтПоставщикаСрезПоследних.Количество КАК Количество,
	|	TK_ДанныеКоммерческихПредложенийОтПоставщикаСрезПоследних.СуммаСНДС КАК СуммаСНДС,
	|	TK_ДанныеКоммерческихПредложенийОтПоставщикаСрезПоследних.ДатаДоставки КАК ДатаДоставки,
	|	TK_ДанныеКоммерческихПредложенийОтПоставщикаСрезПоследних.Цена КАК Цена
	|ПОМЕСТИТЬ ТЗДанныеКП
	|ИЗ
	|	ДанныеЗапросаЦен КАК ДанныеЗапросаЦен
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.TK_ДанныеКоммерческихПредложенийОтПоставщика.СрезПоследних(,
	|			ЗапросЦенПоставщикам = &Ссылка) КАК TK_ДанныеКоммерческихПредложенийОтПоставщикаСрезПоследних
	|		ПО (ДанныеЗапросаЦен.Номенклатура = TK_ДанныеКоммерческихПредложенийОтПоставщикаСрезПоследних.Номенклатура
	|		ИЛИ
	|			ДанныеЗапросаЦен.НоменклатураТекстом = TK_ДанныеКоммерческихПредложенийОтПоставщикаСрезПоследних.НоменклатураТекстом)
	|СГРУППИРОВАТЬ ПО
	|	TK_ДанныеКоммерческихПредложенийОтПоставщикаСрезПоследних.Регистратор,
	|	TK_ДанныеКоммерческихПредложенийОтПоставщикаСрезПоследних.ИдентификаторВерсииЗапроса,
	|	TK_ДанныеКоммерческихПредложенийОтПоставщикаСрезПоследних.ЗапросЦенПоставщикам,
	|	TK_ДанныеКоммерческихПредложенийОтПоставщикаСрезПоследних.Партнер,
	|	TK_ДанныеКоммерческихПредложенийОтПоставщикаСрезПоследних.Количество,
	|	TK_ДанныеКоммерческихПредложенийОтПоставщикаСрезПоследних.СуммаСНДС,
	|	TK_ДанныеКоммерческихПредложенийОтПоставщикаСрезПоследних.ДатаДоставки,
	|	TK_ДанныеКоммерческихПредложенийОтПоставщикаСрезПоследних.Цена,
	|	ДанныеЗапросаЦен.Номенклатура,
	|	ДанныеЗапросаЦен.НоменклатураТекстом
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КоммерческоеПредложение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТЗДанныеКП.КоммерческоеПредложение КАК КоммерческоеПредложение
	|ПОМЕСТИТЬ ДанныеГрупп
	|ИЗ
	|	ТЗДанныеКП КАК ТЗДанныеКП
	|СГРУППИРОВАТЬ ПО
	|	ТЗДанныеКП.КоммерческоеПредложение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 10
	|	ДанныеГрупп.КоммерческоеПредложение КАК КоммерческоеПредложение
	|ПОМЕСТИТЬ ТЗПагинация
	|ИЗ
	|	ДанныеГрупп КАК ДанныеГрупп
	|ГДЕ
	|	НЕ ДанныеГрупп.КоммерческоеПредложение В
	|		(ВЫБРАТЬ ПЕРВЫЕ %1
	|			ДанныеГрупп.КоммерческоеПредложение КАК КоммерческоеПредложение
	|		ИЗ
	|			ДанныеГрупп КАК ДанныеГрупп
	|
	|		УПОРЯДОЧИТЬ ПО
	|			КоммерческоеПредложение)
	|
	|УПОРЯДОЧИТЬ ПО
	|	КоммерческоеПредложение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТЗДанныеКП.КоммерческоеПредложение КАК КоммерческоеПредложение,
	|	ТЗДанныеКП.Партнер КАК Партнер,
	|	ДанныеЗапросаЦен.Номенклатура КАК Номенклатура,
	|	ДанныеЗапросаЦен.НоменклатураТекстом КАК НоменклатураТекстом,
	|	ДанныеЗапросаЦен.Количество КАК Количество,
	|	ДанныеЗапросаЦен.МаксимальнаяЦена КАК Цена,
	|	ДанныеЗапросаЦен.ДатаДоставки КАК ДатаДоставки,
	|	ТЗДанныеКП.Количество КАК КоличествоПредложено,
	|	ТЗДанныеКП.СуммаСНДС КАК СуммаСНДСПредложено,
	|	ТЗДанныеКП.ДатаДоставки КАК ДатаДоставкиПредложено,
	|	ТЗДанныеКП.Цена КАК ЦенаПредложено,
	|	ДанныеЗапросаЦен.НомерСтроки
	|ПОМЕСТИТЬ ОбщиеДанные
	|ИЗ
	|	ДанныеЗапросаЦен КАК ДанныеЗапросаЦен
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТЗДанныеКП КАК ТЗДанныеКП
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.TK_ЗапросыЦенПоставщикамНаTeklifo.СрезПоследних(, Документ = &Ссылка) КАК
	|				TK_ЗапросыЦенПоставщикамНаTeklifoСрезПоследних
	|			ПО ТЗДанныеКП.КоммерческоеПредложение = TK_ЗапросыЦенПоставщикамНаTeklifoСрезПоследних.Документ
	|		ПО (ДанныеЗапросаЦен.Номенклатура = ТЗДанныеКП.Номенклатура
	|		ИЛИ ДанныеЗапросаЦен.НоменклатураТекстом = ТЗДанныеКП.НоменклатураТекстом)
	|ГДЕ
	|	ТЗДанныеКП.КоммерческоеПредложение В
	|		(ВЫБРАТЬ
	|			ТЗПагинация.КоммерческоеПредложение КАК КоммерческоеПредложение
	|		ИЗ
	|			ТЗПагинация КАК ТЗПагинация)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОбщиеДанные.Номенклатура КАК Номенклатура,
	|	ОбщиеДанные.НоменклатураТекстом КАК НоменклатураТекстом,
	|	СУММА(ОбщиеДанные.Количество) КАК Количество,
	|	ОбщиеДанные.Цена КАК Цена,
	|	ОбщиеДанные.ДатаДоставки КАК ДатаДоставки,
	|	ОбщиеДанные.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	ОбщиеДанные КАК ОбщиеДанные
	|СГРУППИРОВАТЬ ПО
	|	ОбщиеДанные.Номенклатура,
	|	ОбщиеДанные.НоменклатураТекстом,
	|	ОбщиеДанные.Цена,
	|	ОбщиеДанные.ДатаДоставки,
	|	ОбщиеДанные.НомерСтроки
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОбщиеДанные.Партнер КАК Партнер,
	|	ОбщиеДанные.КоммерческоеПредложение КАК КоммерческоеПредложение
	|ИЗ
	|	ОбщиеДанные КАК ОбщиеДанные
	|СГРУППИРОВАТЬ ПО
	|	ОбщиеДанные.Партнер,
	|	ОбщиеДанные.КоммерческоеПредложение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОбщиеДанные.Партнер КАК Партнер,
	|	ОбщиеДанные.КоличествоПредложено КАК КоличествоПредложено,
	|	ОбщиеДанные.СуммаСНДСПредложено КАК СуммаСНДСПредложено,
	|	ОбщиеДанные.ДатаДоставкиПредложено КАК ДатаДоставкиПредложено,
	|	ОбщиеДанные.Номенклатура КАК Номенклатура,
	|	ОбщиеДанные.НоменклатураТекстом КАК НоменклатураТекстом,
	|	ОбщиеДанные.ЦенаПредложено КАК ЦенаПредложено,
	|	ОбщиеДанные.КоммерческоеПредложение КАК КоммерческоеПредложение
	|ИЗ
	|	ОбщиеДанные КАК ОбщиеДанные",НомерСтраницы));
	Запрос.УстановитьПараметр("Ссылка",Ссылка );
	
	Результат = Запрос.ВыполнитьПакет();
	
	Возврат  Новый Структура("ДанныеЗапроса,ПартнерыИКП,ДанныеПредложений", Результат.Получить(5),Результат.Получить(6),Результат.Получить(7));
	
КонецФункции



&НаСервере
Процедура КомандаВпередНаСервере()
	НомерСтраницы = НомерСтраницы + 10;
	ИнициализироватьМатрицуДанных();
КонецПроцедуры



&НаСервере
Процедура КомандаНазадНаСервере()
	НомерСтраницы = НомерСтраницы - 10;
	ИнициализироватьМатрицуДанных();
КонецПроцедуры






&НаСервереБезКонтекста
Процедура ЗаполнитьДокументНаСервере(ДанныеФормы,АдресДокументаЗаказа)

Док = ПолучитьИзВременногоХранилища(АдресДокументаЗаказа).Док;

ЗначениеВДанныеФормы(Док,ДанныеФормы); 

КонецПроцедуры



&НаСервере
Функция ЗаказыПоставщикамНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц();
	Запрос.УстановитьПараметр("ПодобранныеПозиции", ПодобранныеПозиции.Выгрузить());
	Запрос.Текст = "ВЫБРАТЬ
	|	ПодобранныеПозиции.Партнер,
	|	ПодобранныеПозиции.КоммерческоеПредложение,
	|	ПодобранныеПозиции.Номенклатура,
	|	ПодобранныеПозиции.ДатаДоставки,
	|	ПодобранныеПозиции.Количество,
	|	ПодобранныеПозиции.Цена
	|ПОМЕСТИТЬ ВтПодобранныеПозиции
	|ИЗ
	|	&ПодобранныеПозиции КАК ПодобранныеПозиции";
	Запрос.Выполнить(); 
	
	Запрос.Текст = "ВЫБРАТЬ
	|	ВтПодобранныеПозиции.Партнер,
	|	ВтПодобранныеПозиции.КоммерческоеПредложение,
	|	ВтПодобранныеПозиции.Номенклатура,
	|	ВтПодобранныеПозиции.ДатаДоставки,
	|	ВтПодобранныеПозиции.Количество,
	|	ВтПодобранныеПозиции.Цена
	|ПОМЕСТИТЬ ТЗ
	|ИЗ
	|	ВтПодобранныеПозиции КАК ВтПодобранныеПозиции
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТЗ.Партнер КАК Партнер,
	|	ТЗ.КоммерческоеПредложение КАК КоммерческоеПредложение,
	|	ТЗ.Номенклатура,
	|	ТЗ.ДатаДоставки,
	|	ТЗ.Количество,
	|	ТЗ.Цена,
	|	TK_ДанныеКоммерческихПредложенийОтПоставщика.СтавкаНДС,
	|	TK_ДанныеКоммерческихПредложенийОтПоставщика.СуммаНДС,
	|	TK_ДанныеКоммерческихПредложенийОтПоставщика.СуммаСНДС
	|ИЗ
	|	ТЗ КАК ТЗ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.TK_ДанныеКоммерческихПредложенийОтПоставщика КАК
	|			TK_ДанныеКоммерческихПредложенийОтПоставщика
	|		ПО ТЗ.КоммерческоеПредложение = TK_ДанныеКоммерческихПредложенийОтПоставщика.Регистратор
	|		И ТЗ.Номенклатура = TK_ДанныеКоммерческихПредложенийОтПоставщика.Номенклатура
	|ИТОГИ
	|	МАКСИМУМ(Партнер) КАК Партнер
	|ПО
	|	КоммерческоеПредложение";	
	
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	МассивЗаказов = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		Заказ = ДокументЗаказа(Выборка);
		МассивЗаказов.Добавить(ПоместитьВоВременноеХранилище(Новый Структура("Док",Заказ),Новый УникальныйИдентификатор()));
	КонецЦикла;
	
	Возврат МассивЗаказов;
	
КонецФункции


&НаСервереБезКонтекста
Функция ДокументЗаказа(Выборка)
	КоммерческоеПредложение = Выборка.КоммерческоеПредложение;
	
	СтруктураРеквизитов = ОбщегоНазначенияУТВызовСервера.ЗначенияРеквизитовОбъекта(КоммерческоеПредложение, "Организация,Контрагент");
	
	ДокЗаказа = Документы.ЗаказПоставщику.СоздатьДокумент();
	ДокЗаказа.Заполнить(Неопределено);
	
	ДокЗаказа.Дата = ТекущаяДатаСеанса();
	ДокЗаказа.Организация = СтруктураРеквизитов.Организация;
	ДокЗаказа.Партнер = Выборка.Партнер;
	ДокЗаказа.Контрагент = СтруктураРеквизитов.Контрагент;
	
	ВыборкаТовары = Выборка.Выбрать(ОбходРезультатаЗапроса.Прямой);
	 
	Пока ВыборкаТовары.Следующий() Цикл
		СтрокаТовары = ДокЗаказа.Товары.Добавить();
		СтрокаТовары.Номенклатура = ВыборкаТовары.Номенклатура;
		СтрокаТовары.Количество   = ВыборкаТовары.Количество;
		СтрокаТовары.КоличествоУпаковок = ВыборкаТовары.Количество;
		СтрокаТовары.Цена         = ВыборкаТовары.Цена;
		СтрокаТовары.Сумма        = СтрокаТовары.Количество * СтрокаТовары.Цена;
		СтрокаТовары.СтавкаНДС    = ВыборкаТовары.СтавкаНДС;
		СтрокаТовары.СуммаСНДС    = ВыборкаТовары.СуммаСНДС;
	КонецЦикла;
	
	
	Возврат ДокЗаказа;
КонецФункции



#КонецОбласти
