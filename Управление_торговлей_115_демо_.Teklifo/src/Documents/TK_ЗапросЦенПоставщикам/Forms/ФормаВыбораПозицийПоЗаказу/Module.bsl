
#Область ОписаниеПеременных

#КонецОбласти

#Область ОбработчикиСобытийФормы

// Код процедур и функций



#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Код процедур и функций

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы //<ИмяТаблицыФормы>

 &НаКлиенте
Процедура МатрицаДанныхПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, ЭтоГруппа, Параметр)
	Отказ = Истина;
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если Параметры.Свойство("Ссылка") Тогда
		Ссылка = Параметры.Ссылка;
		ИнициализироватьМатрицуДанных();
	Иначе
		Отказ = Истина;
	КонецЕсли;
КонецПроцедуры

#Область ОбработчикиКомандФормы

// Код процедур и функций

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ИнициализироватьМатрицуДанных()
	МатрицаДанных.Очистить();
	
	УсловноеОформление.Элементы.Очистить();
	
	СтруктураДанных = ДанныеПредложенийПоЗапросу();
	
	
	ВыборкаПартнеры = СтруктураДанных.ПартнерыИКП.Выбрать();
	
	
	Пока ВыборкаПартнеры.Следующий() Цикл
		СгенерироватьКолонкиПредложений(ВыборкаПартнеры);
	КонецЦикла;
	
	ВыборкаДанныхЗапроса = СтруктураДанных.ДанныеЗапроса.Выбрать();
	
	ВыборкаПредложений   = СтруктураДанных.ДанныеПредложений.Выбрать();
	
	Пока ВыборкаДанныхЗапроса.Следующий() Цикл
		СтрокаМатрицы = МатрицаДанных.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаМатрицы,ВыборкаДанныхЗапроса);
		
		НоменклатураНайдена = Ложь;
		Пока ВыборкаПредложений.НайтиСледующий(ВыборкаДанныхЗапроса.Номенклатура,"Номенклатура" ) Цикл
			GUIDДляКолонки = УникИдентификатор(ВыборкаПредложений.КоммерческоеПредложение);
			СтрокаМатрицы["СуммаСНДС_" + GUIDДляКолонки] = ВыборкаПредложений.СуммаСНДСПредложено;
			СтрокаМатрицы["Количество_" + GUIDДляКолонки] = ВыборкаПредложений.КоличествоПредложено;
			СтрокаМатрицы["Цена_" + GUIDДляКолонки] = ВыборкаПредложений.ЦенаПредложено;
			СтрокаМатрицы["ДатаДоставки_" + GUIDДляКолонки] = ВыборкаПредложений.ДатаДоставкиПредложено;
			НоменклатураНайдена = Истина;
		КонецЦикла;
		
		Если Не НоменклатураНайдена Тогда
			Пока ВыборкаПредложений.НайтиСледующий(ВыборкаДанныхЗапроса.НоменклатураТекстом, "НоменклатураТекстом") Цикл
				GUIDДляКолонки = УникИдентификатор(ВыборкаПредложений.КоммерческоеПредложение);
				СтрокаМатрицы["СуммаСНДС_" + GUIDДляКолонки] = ВыборкаПредложений.СуммаСНДСПредложено;
				СтрокаМатрицы["Количество_" + GUIDДляКолонки] = ВыборкаПредложений.КоличествоПредложено;
				СтрокаМатрицы["Цена_" + GUIDДляКолонки] = ВыборкаПредложений.ЦенаПредложено;
				СтрокаМатрицы["ДатаДоставки_" + GUIDДляКолонки] = ВыборкаПредложений.ДатаДоставкиПредложено;
				НоменклатураНайдена = Истина;
			КонецЦикла;
		КонецЕсли;
		
		ВыборкаПредложений.Сбросить();
	КонецЦикла; 
	
КонецПроцедуры



Процедура СгенерироватьКолонкиПредложений(ВыборкаПартнеры)
	МассивДобавляемыхРеквизитов = Новый Массив;

    ИДДляКолонки = УникИдентификатор(ВыборкаПартнеры.КоммерческоеПредложение);

	Группа = Элементы.Добавить("ГруппаПартнер_" + ИДДляКолонки, Тип("ГруппаФормы"),
		Элементы.МатрицаДанных);
	Группа.Вид = ВидГруппыФормы.ГруппаКолонок;
	Группа.Группировка = ГруппировкаКолонок.Вертикальная;

	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("Выбран_" + ИДДляКолонки,
		Новый ОписаниеТипов("Булево"), "МатрицаДанных", ""));

	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("СуммаСНДС_" + ИДДляКолонки,
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)), "МатрицаДанных", "Партнер"));

	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("Количество_" + ИДДляКолонки, Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)), "МатрицаДанных", ""));
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("Цена_" + ИДДляКолонки,
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)), "МатрицаДанных", ""));
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ДатаДоставки_" + ИДДляКолонки, Новый ОписаниеТипов("Дата", Новый КвалификаторыДаты(ЧастиДаты.Дата)),
		"МатрицаДанных", ""));
	ИзменитьРеквизиты(МассивДобавляемыхРеквизитов);

	ГруппаВыбранСумма = Элементы.Добавить("ГруппаВыбранСумма_" + ИДДляКолонки, Тип(
		"ГруппаФормы"), Группа);
	ГруппаВыбранСумма.Вид = ВидГруппыФормы.ГруппаКолонок;
	ГруппаВыбранСумма.Группировка = ГруппировкаКолонок.Горизонтальная;
	ГруппаКоличествоЦена = Элементы.Добавить("ГруппаКоличествоЦена_" + ИДДляКолонки, Тип(
		"ГруппаФормы"), Группа);
	ГруппаКоличествоЦена.Вид = ВидГруппыФормы.ГруппаКолонок;
	ГруппаКоличествоЦена.Группировка = ГруппировкаКолонок.Горизонтальная;
	НоваяКолонка = Элементы.Добавить("Выбран_" + ИДДляКолонки, Тип("ПолеФормы"),
		ГруппаВыбранСумма);
	НоваяКолонка.Заголовок = "";
	НоваяКолонка.ПутьКДанным = "МатрицаДанных." + "Выбран_" + ИДДляКолонки;
	НоваяКолонка.Вид = ВидПоляФормы.ПолеФлажка;
	НоваяКолонка.ОтображатьВШапке = Ложь;
	НоваяКолонка.УстановитьДействие("ПриИзменении", "ВыполнитьВыборПозиции");
	
	НоваяКолонка = Элементы.Добавить("СуммаСНДС_" + ИДДляКолонки, Тип("ПолеФормы"),
		ГруппаВыбранСумма);
	НоваяКолонка.Заголовок = Строка(ВыборкаПартнеры.Партнер);
	НоваяКолонка.ПутьКДанным = "МатрицаДанных." + "СуммаСНДС_" + ИДДляКолонки;
	НоваяКолонка.Вид = ВидПоляФормы.ПолеВвода;
	НоваяКолонка.ТолькоПросмотр = Истина;
	НоваяКолонка = Элементы.Добавить("Количество_" + ИДДляКолонки, Тип("ПолеФормы"),
		ГруппаКоличествоЦена);
	НоваяКолонка.Заголовок = "Количество";
	НоваяКолонка.ПутьКДанным = "МатрицаДанных." + "Количество_" + ИДДляКолонки;
	НоваяКолонка.Вид = ВидПоляФормы.ПолеВвода;
	НоваяКолонка.ТолькоПросмотр = Истина;

	НоваяКолонка = Элементы.Добавить("Цена_" + ИДДляКолонки, Тип("ПолеФормы"),
		ГруппаКоличествоЦена);
	НоваяКолонка.Заголовок = "Цена";
	НоваяКолонка.ПутьКДанным = "МатрицаДанных." + "Цена_" + ИДДляКолонки;
	НоваяКолонка.Вид = ВидПоляФормы.ПолеВвода;
	НоваяКолонка.ТолькоПросмотр = Истина;

	НоваяКолонка = Элементы.Добавить("ДатаДоставки_" + ИДДляКолонки, Тип("ПолеФормы"),
		Группа);
	НоваяКолонка.Заголовок = "Дата доставки";
	НоваяКолонка.ПутьКДанным = "МатрицаДанных." + "ДатаДоставки_" + ИДДляКолонки;
	НоваяКолонка.Вид = ВидПоляФормы.ПолеВвода;
	НоваяКолонка.ТолькоПросмотр = Истина;
	
	УстановитьУсловноеОформление(ИДДляКолонки);
	
КонецПроцедуры



&НаСервере
Процедура УстановитьУсловноеОформление(ИДДляКолонки)
	
	
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	
	ОтборЭлемента = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("МатрицаДанных.Выбран_" + ИДДляКолонки);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	ОтборЭлемента.Использование = Истина;	
	
	ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();    
    ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("Цена_" + ИДДляКолонки);
    
    ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();    
    ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("Количество_" + ИДДляКолонки);
    
    ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();    
    ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("ДатаДоставки_" + ИДДляКолонки);
    
    ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();    
    ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("СуммаСНДС_" + ИДДляКолонки);
    
    ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();    
    ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("Выбран_" + ИДДляКолонки);
    
 
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.СветлоЗеленый);
	ЭлементОформления.Использование = Истина;

КонецПроцедуры


&НаКлиенте
Процедура ВыполнитьВыборПозиции(Элемент)
	ТекДанные = Элементы.МатрицаДанных.ТекущиеДанные;
	
	ЗначениеВыбрано = ТекДанные[Элемент.Имя];
	
	IDКолонки = СтрЗаменить(Элемент.Имя,"Выбран_","");
	
	КП = ПолучитьКППоID(IDКолонки);
	
	НайденныеСтроки = ПодобранныеПозиции.НайтиСтроки(Новый Структура("Номенклатура,КоммерческоеПредложение",ТекДанные.Номенклатура,КП));
	
	Если НайденныеСтроки.Количество() = 0 Тогда
		СтрокаПодобранныеПозиции = ПодобранныеПозиции.Добавить();
		СтрокаПодобранныеПозиции.Номенклатура            = ТекДанные.Номенклатура;
		СтрокаПодобранныеПозиции.КоммерческоеПредложение = КП;
		СтрокаПодобранныеПозиции.Партнер                 = ОбщегоНазначенияУТВызовСервера.ЗначениеРеквизитаОбъекта(КП,
			"Партнер");
		СтрокаПодобранныеПозиции.Количество              = ТекДанные["Количество_" + IDКолонки];
		СтрокаПодобранныеПозиции.Цена                    = ТекДанные["Цена_" + IDКолонки];
		СтрокаПодобранныеПозиции.ДатаДоставки            = ТекДанные["ДатаДоставки_" + IDКолонки];
	ИначеЕсли Не ЗначениеВыбрано И НайденныеСтроки.Количество() > 0 Тогда
		 Для Каждого ЭлементСтроки Из НайденныеСтроки Цикл
		 	ПодобранныеПозиции.Удалить(ЭлементСтроки);
		 КонецЦикла;		 
	КонецЕсли;
	
	
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобранныеПозицииПередУдалением(Элемент, Отказ)
	ТекДанные = Элементы.ПодобранныеПозиции.ТекущиеДанные;
	IDКолонки = УникИдентификатор(ТекДанные.КоммерческоеПредложение);
	
	НайденныеСтроки = МатрицаДанных.НайтиСтроки(Новый Структура("Номенклатура",ТекДанные.Номенклатура));
	
	Для Каждого ЭлементСтроки Из НайденныеСтроки Цикл
		ЭлементСтроки["Выбран_" + IDКолонки] = Ложь;
	КонецЦикла;
	
КонецПроцедуры


&НаКлиенте
Процедура ПодобранныеПозицииПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, ЭтоГруппа, Параметр)
	Отказ = Истина;
КонецПроцедуры


Функция ПолучитьКППоID(IDКолонки)
	Возврат Документы.TK_КоммерческоеПредложениеОтПоставщика.ПолучитьСсылку(Новый УникальныйИдентификатор(ВернутьПробелыGUID(IDКолонки)));
КонецФункции


//вернем на место символы "-" (минус) в ГУИДе
Функция ВернутьПробелыGUID(ИД) Экспорт
    возврат  Сред(ИД,1,8)+"-"+Сред(ИД,9,4)+"-"+Сред(ИД,13,4)+"-"+Сред(ИД,17,4)+"-"+Сред(ИД,21,12);
КонецФункции // ВернутьПробелыGUID()


//Возвращает уникальный идентификатор объекта
//ссылкаНаОбъект - ссылка на объект для которого необходимо получить уникальный идентификатор
//возвращаемое значение - строка с уникальный идентификатором объекта без символов разделителей
Функция УникИдентификатор(ссылкаНаОбъект) Экспорт
	//попытка сделана чтобы не вылетали при ошибках в базе 1С, например когда 
	//в регистрах регистратор = неопределено NULL и тд...
	УникальныйКод = "";
	Попытка
		Если НЕ ссылкаНаОбъект.Пустая() Тогда 
			УникальныйКод = ссылкаНаОбъект.УникальныйИдентификатор();
		    УникальныйКод = СтрЗаменить(УникальныйКод,"-","");
		КонецЕсли;
	Исключение
	КонецПопытки;
	Возврат УникальныйКод;
КонецФункции // УникИдентификатор(ссылкаНаОбъект)()


&НаСервере
Функция ДанныеПредложенийПоЗапросу()
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	TK_ДанныеКоммерческихПредложенийОтПоставщикаСрезПоследних.Регистратор КАК КоммерческоеПредложение,
	|	TK_ДанныеКоммерческихПредложенийОтПоставщикаСрезПоследних.ИдентификаторВерсииЗапроса КАК ИдентификаторВерсииЗапроса,
	|	TK_ДанныеКоммерческихПредложенийОтПоставщикаСрезПоследних.ЗапросЦенПоставщикам КАК ЗапросЦенПоставщикам,
	|	TK_ДанныеКоммерческихПредложенийОтПоставщикаСрезПоследних.Партнер КАК Партнер,
	|	TK_ДанныеКоммерческихПредложенийОтПоставщикаСрезПоследних.Номенклатура КАК Номенклатура,
	|	TK_ДанныеКоммерческихПредложенийОтПоставщикаСрезПоследних.НоменклатураТекстом КАК НоменклатураТекстом,
	|	TK_ДанныеКоммерческихПредложенийОтПоставщикаСрезПоследних.Количество КАК Количество,
	|	TK_ДанныеКоммерческихПредложенийОтПоставщикаСрезПоследних.СуммаСНДС КАК СуммаСНДС,
	|	TK_ДанныеКоммерческихПредложенийОтПоставщикаСрезПоследних.ДатаДоставки КАК ДатаДоставки,
	|	TK_ДанныеКоммерческихПредложенийОтПоставщикаСрезПоследних.Цена
	|ПОМЕСТИТЬ ТЗДанныеКП
	|ИЗ
	|	РегистрСведений.TK_ДанныеКоммерческихПредложенийОтПоставщика.СрезПоследних(, ЗапросЦенПоставщикам = &Ссылка) КАК
	|		TK_ДанныеКоммерческихПредложенийОтПоставщикаСрезПоследних
	|СГРУППИРОВАТЬ ПО
	|	TK_ДанныеКоммерческихПредложенийОтПоставщикаСрезПоследних.Регистратор,
	|	TK_ДанныеКоммерческихПредложенийОтПоставщикаСрезПоследних.ИдентификаторВерсииЗапроса,
	|	TK_ДанныеКоммерческихПредложенийОтПоставщикаСрезПоследних.ЗапросЦенПоставщикам,
	|	TK_ДанныеКоммерческихПредложенийОтПоставщикаСрезПоследних.Партнер,
	|	TK_ДанныеКоммерческихПредложенийОтПоставщикаСрезПоследних.Номенклатура,
	|	TK_ДанныеКоммерческихПредложенийОтПоставщикаСрезПоследних.НоменклатураТекстом,
	|	TK_ДанныеКоммерческихПредложенийОтПоставщикаСрезПоследних.Количество,
	|	TK_ДанныеКоммерческихПредложенийОтПоставщикаСрезПоследних.СуммаСНДС,
	|	TK_ДанныеКоммерческихПредложенийОтПоставщикаСрезПоследних.ДатаДоставки,
	|	TK_ДанныеКоммерческихПредложенийОтПоставщикаСрезПоследних.Цена
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КоммерческоеПредложение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	TK_ЗапросЦенПоставщикамТовары.Номенклатура КАК Номенклатура,
	|	TK_ЗапросЦенПоставщикамТовары.НоменклатураТекстом КАК НоменклатураТекстом,
	|	TK_ЗапросЦенПоставщикамТовары.Количество КАК Количество,
	|	TK_ЗапросЦенПоставщикамТовары.МаксимальнаяЦена КАК МаксимальнаяЦена,
	|	TK_ЗапросЦенПоставщикамТовары.ДатаДоставки КАК ДатаДоставки,
	|	TK_ЗапросЦенПоставщикамТовары.ИдентификаторСтроки КАК ИдентификаторСтроки
	|ПОМЕСТИТЬ ДанныеЗапросаЦен
	|ИЗ
	|	Документ.TK_ЗапросЦенПоставщикам.Товары КАК TK_ЗапросЦенПоставщикамТовары
	|ГДЕ
	|	TK_ЗапросЦенПоставщикамТовары.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТЗДанныеКП.КоммерческоеПредложение КАК КоммерческоеПредложение,
	|	ТЗДанныеКП.Партнер КАК Партнер,
	|	ДанныеЗапросаЦен.Номенклатура КАК Номенклатура,
	|	ДанныеЗапросаЦен.НоменклатураТекстом КАК НоменклатураТекстом,
	|	ДанныеЗапросаЦен.Количество КАК Количество,
	|	ДанныеЗапросаЦен.МаксимальнаяЦена КАК Цена,
	|	ДанныеЗапросаЦен.ДатаДоставки КАК ДатаДоставки,
	|	ТЗДанныеКП.Количество КАК КоличествоПредложено,
	|	ТЗДанныеКП.СуммаСНДС КАК СуммаСНДСПредложено,
	|	ТЗДанныеКП.ДатаДоставки КАК ДатаДоставкиПредложено,
	|	ТЗДанныеКП.Цена КАК ЦенаПредложено
	|ПОМЕСТИТЬ ОбщиеДанные
	|ИЗ
	|	ДанныеЗапросаЦен КАК ДанныеЗапросаЦен
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТЗДанныеКП КАК ТЗДанныеКП
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.TK_ЗапросыЦенПоставщикамНаTeklifo.СрезПоследних(, Документ = &Ссылка) КАК
	|				TK_ЗапросыЦенПоставщикамНаTeklifoСрезПоследних
	|			ПО ТЗДанныеКП.ЗапросЦенПоставщикам = TK_ЗапросыЦенПоставщикамНаTeklifoСрезПоследних.Документ
	|		ПО ДанныеЗапросаЦен.Номенклатура = ТЗДанныеКП.Номенклатура
	|		ИЛИ ДанныеЗапросаЦен.НоменклатураТекстом = ТЗДанныеКП.НоменклатураТекстом
	|ГДЕ
	|	ТЗДанныеКП.ИдентификаторВерсииЗапроса = TK_ЗапросыЦенПоставщикамНаTeklifoСрезПоследних.ИдентификаторВерсии
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОбщиеДанные.Номенклатура КАК Номенклатура,
	|	ОбщиеДанные.НоменклатураТекстом КАК НоменклатураТекстом,
	|	СУММА(ОбщиеДанные.Количество) КАК Количество,
	|	ОбщиеДанные.Цена КАК Цена,
	|	ОбщиеДанные.ДатаДоставки КАК ДатаДоставки
	|ИЗ
	|	ОбщиеДанные КАК ОбщиеДанные
	|СГРУППИРОВАТЬ ПО
	|	ОбщиеДанные.Номенклатура,
	|	ОбщиеДанные.НоменклатураТекстом,
	|	ОбщиеДанные.Цена,
	|	ОбщиеДанные.ДатаДоставки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОбщиеДанные.Партнер КАК Партнер,
	|	ОбщиеДанные.КоммерческоеПредложение
	|ИЗ
	|	ОбщиеДанные КАК ОбщиеДанные
	|СГРУППИРОВАТЬ ПО
	|	ОбщиеДанные.Партнер,
	|	ОбщиеДанные.КоммерческоеПредложение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОбщиеДанные.Партнер,
	|	ОбщиеДанные.КоличествоПредложено,
	|	ОбщиеДанные.СуммаСНДСПредложено,
	|	ОбщиеДанные.ДатаДоставкиПредложено,
	|	ОбщиеДанные.Номенклатура,
	|	ОбщиеДанные.НоменклатураТекстом,
	|	ОбщиеДанные.ЦенаПредложено,
	|	ОбщиеДанные.КоммерческоеПредложение
	|ИЗ
	|	ОбщиеДанные КАК ОбщиеДанные");
	Запрос.УстановитьПараметр("Ссылка",Ссылка );
	
	Результат = Запрос.ВыполнитьПакет();
	
	Возврат  Новый Структура("ДанныеЗапроса,ПартнерыИКП,ДанныеПредложений", Результат.Получить(3),Результат.Получить(4),Результат.Получить(5));
	
КонецФункции


#КонецОбласти
