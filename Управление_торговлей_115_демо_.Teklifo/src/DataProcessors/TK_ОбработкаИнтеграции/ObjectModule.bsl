#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОписаниеПеременных

Перем АдресСервера;

#КонецОбласти

#Область ПрограммныйИнтерфейс
 
// Получить результат отправки номенклатуры.
// 
// Параметры:
//  МассивНоменклатуры - Массив Из СправочникСсылка.Номенклатура - Массив номенклатуры
//  ТокенСессии - Строка - Токен сессии
//  ОрганизацияНаСайте - Строка - Организация на сайте
// 
// Возвращаемое значение:
//  Структура, Произвольный - Получить результат отправки номенклатуры
Функция ПолучитьРезультатОтправкиНоменклатуры(МассивНоменклатуры, ТокенСессии = "", ОрганизацияНаСайте = "") Экспорт

	МассивДанных = Новый Массив;

	СоответствиеРеквизитовНоменклатуры = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивНоменклатуры,
		"Наименование, Код, Марка, Марка.Код, ЕдиницаИзмерения, Описание");

	Для Каждого Номенклатура Из МассивНоменклатуры Цикл

		РеквизитыНоменклатуры = СоответствиеРеквизитовНоменклатуры[Номенклатура];

		СтруктураДанных = Новый Структура;
		СтруктураДанных.Вставить("externalId", Строка(Номенклатура.УникальныйИдентификатор()));
		СтруктураДанных.Вставить("name", РеквизитыНоменклатуры.Наименование);
		СтруктураДанных.Вставить("number", РеквизитыНоменклатуры.Код);
		СтруктураДанных.Вставить("brand", Строка(РеквизитыНоменклатуры.Марка));
		СтруктураДанных.Вставить("brandNumber", РеквизитыНоменклатуры.МаркаКод);
		СтруктураДанных.Вставить("unit", Строка(РеквизитыНоменклатуры.ЕдиницаИзмерения));
		СтруктураДанных.Вставить("description", РеквизитыНоменклатуры.Описание);
		СтруктураДанных.Вставить("archive", Ложь);

		МассивДанных.Добавить(СтруктураДанных);

	КонецЦикла;

	ТелоЗапроса = TK_РаботаСWeb.СериализоватьJSON(МассивДанных);
	СоединениеССервером = ПолучитьСоединение();

	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/json");
	Заголовки.Вставить("Cookie", ТокенСессии);

	Ресурс = СтрШаблон("api/company/%1/product", ОрганизацияНаСайте);
	HTTPЗапрос = Новый HTTPЗапрос(Ресурс, Заголовки);
	HTTPЗапрос.УстановитьТелоИзСтроки(ТелоЗапроса);
	Результат = СоединениеССервером.ВызватьHTTPМетод("POST", HTTPЗапрос);
	Ответ = Результат.ПолучитьТелоКакСтроку();

	СтруктураДанных = TK_РаботаСWeb.ПолучитьДанныеИзJSON(Ответ);

	Возврат СтруктураДанных;

КонецФункции
 
// Получить результат отправки документа запрос цен поставщикам.
// 
// Параметры:
//  ДанныеОтправки - Структура - 
//  ТокенСессии - Строка - Токен сессии
//  ОрганизацияНаСайте - Строка - Организация на сайте
// 
// Возвращаемое значение:
//  Структура, Произвольный - Получить результат отправки документа запрос цен поставщикам
Функция ПолучитьРезультатОтправкиДокументаЗапросЦенПоставщикам(ДанныеОтправки, ТокенСессии = "",
	ОрганизацияНаСайте = "") Экспорт

	ТелоЗапроса = TK_РаботаСWeb.СериализоватьJSON(ДанныеОтправки);

	Cookie = ТокенСессии + ";user-company=" + ОрганизацияНаСайте;

	СоединениеССервером = ПолучитьСоединение();

	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/json");
	Заголовки.Вставить("Cookie", Cookie);

	Ресурс = "api/rfq";
	HTTPЗапрос = Новый HTTPЗапрос(Ресурс, Заголовки);
	HTTPЗапрос.УстановитьТелоИзСтроки(ТелоЗапроса);
	Результат = СоединениеССервером.ВызватьHTTPМетод("POST", HTTPЗапрос);
	Ответ = Результат.ПолучитьТелоКакСтроку();

	СтруктураДанных = TK_РаботаСWeb.ПолучитьДанныеИзJSON(Ответ);

	Возврат СтруктураДанных;

КонецФункции
 
// Получить результат отправки документа запрос цен поставщикам обновление.
// 
// Параметры:
//  ДанныеОтправки - Структура -
//  ИдентификаторДокумента - Строка - Идентификатор документа
//  ТокенСессии - Строка - Токен сессии
//  ОрганизацияНаСайте - Строка - Организация на сайте
// 
// Возвращаемое значение:
//  Структура, Произвольный - Получить результат отправки документа запрос цен поставщикам обновление
Функция ПолучитьРезультатОтправкиДокументаЗапросЦенПоставщикам_Обновление(ДанныеОтправки, ИдентификаторДокумента = "",
	ТокенСессии = "", ОрганизацияНаСайте = "") Экспорт

	ТелоЗапроса = TK_РаботаСWeb.СериализоватьJSON(ДанныеОтправки);

	Cookie = ТокенСессии + ";user-company=" + ОрганизацияНаСайте;

	СоединениеССервером = ПолучитьСоединение();

	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/json");
	Заголовки.Вставить("Cookie", Cookie);

	Ресурс = СтрШаблон("api/rfq/%1", ИдентификаторДокумента);
	HTTPЗапрос = Новый HTTPЗапрос(Ресурс, Заголовки);
	HTTPЗапрос.УстановитьТелоИзСтроки(ТелоЗапроса);
	Результат = СоединениеССервером.ВызватьHTTPМетод("PUT", HTTPЗапрос);
	Ответ = Результат.ПолучитьТелоКакСтроку();

	Если Ответ = "" Тогда
		СтруктураДанных = Новый Структура;
	Иначе
		СтруктураДанных = TK_РаботаСWeb.ПолучитьДанныеИзJSON(Ответ);
	КонецЕсли;

	Возврат СтруктураДанных;

КонецФункции
 
// Получить результат документа запрос цен от клиента.
// 
// Параметры:
//  ИдентификаторДокумента - Строка - Идентификатор документа
//  ТокенСессии - Строка - Токен сессии
//  ОрганизацияНаСайте - Строка - Организация на сайте
// 
// Возвращаемое значение:
//  Структура, Произвольный - Получить результат документа запрос цен от клиента
Функция ПолучитьРезультатДокументаЗапросЦенОтКлиента(ИдентификаторДокумента = "", ТокенСессии = "",
	ОрганизацияНаСайте = "") Экспорт

	Cookie = ТокенСессии + ";user-company=" + ОрганизацияНаСайте;

	СоединениеССервером = ПолучитьСоединение();

	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/json");
	Заголовки.Вставить("Cookie", Cookie);

	Ресурс = СтрШаблон("api/rfq/%1", ИдентификаторДокумента);
	HTTPЗапрос = Новый HTTPЗапрос(Ресурс, Заголовки);
	Результат = СоединениеССервером.ВызватьHTTPМетод("GET", HTTPЗапрос);
	Ответ = Результат.ПолучитьТелоКакСтроку();

	Если Ответ = "" Тогда
		СтруктураДанных = Новый Структура;
	Иначе
		СтруктураДанных = TK_РаботаСWeb.ПолучитьДанныеИзJSON(Ответ,
			"startDate,endDate,createdAt,updatedAt,deliveryDate");
	КонецЕсли;

	Возврат СтруктураДанных;

КонецФункции
 
// Получить результат подтверждения участия.
// 
// Параметры:
//  ИдентификаторДокумента - Строка - Идентификатор документа
//  ТокенСессии - Строка - Токен сессии
//  ОрганизацияНаСайте - Строка - Организация на сайте
// 
// Возвращаемое значение:
//  Структура - Получить результат подтверждения участия:
// * Подтвержден - Булево 
// * Сообщение - Строка  
Функция ПолучитьРезультатПодтвержденияУчастия(ИдентификаторДокумента = "", ТокенСессии = "", ОрганизацияНаСайте = "") Экспорт

	Cookie = ТокенСессии + ";user-company=" + ОрганизацияНаСайте;

	СоединениеССервером = ПолучитьСоединение();

	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/json");
	Заголовки.Вставить("Cookie", Cookie);

	Ресурс = СтрШаблон("api/rfq/%1/participation", ИдентификаторДокумента);
	HTTPЗапрос = Новый HTTPЗапрос(Ресурс, Заголовки);
	Результат = СоединениеССервером.ВызватьHTTPМетод("PATCH", HTTPЗапрос);

	Подтвержден = Результат.КодСостояния = 200;

	СтруктураДанных = Новый Структура("Подтвержден,Сообщение", Подтвержден, ?(Подтвержден, "",
		"Не удалось выполнить подтверждение!"));
	Возврат СтруктураДанных;

КонецФункции
 
// Выполнить сохранение данных.
// 
// Параметры:
//  ТаблицаОрганизаций -ТаблицаЗначений
Процедура ВыполнитьСохранениеДанных(ТаблицаОрганизаций) Экспорт

	УчетнаяЗапись = ПолучитьУчетнуюЗапись();
	СохранитьДанныеСоответствия(УчетнаяЗапись, ТаблицаОрганизаций);

КонецПроцедуры
 
// Получить учетную запись.
// 
// Возвращаемое значение:
//  СправочникСсылка.TK_УчетныеЗаписиНаСайте  
Функция ПолучитьУчетнуюЗапись() Экспорт

	Запрос = Новый Запрос("ВЫБРАТЬ
						  |	TK_УчетныеЗаписиНаСайте.Ссылка
						  |ИЗ
						  |	Справочник.TK_УчетныеЗаписиНаСайте КАК TK_УчетныеЗаписиНаСайте
						  |ГДЕ
						  |	TK_УчетныеЗаписиНаСайте.Email = &Email
						  |	И НЕ TK_УчетныеЗаписиНаСайте.ПометкаУдаления");
	Запрос.УстановитьПараметр("Email", Email);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();

	Если Выборка.Количество() > 0 Тогда
		Возврат ОбновитьПарольУчетнойЗаписи(Выборка.Ссылка);
	КонецЕсли;

	УчетнаяЗапись = Справочники.TK_УчетныеЗаписиНаСайте.СоздатьЭлемент();
	УчетнаяЗапись.Наименование = Email;
	УчетнаяЗапись.Email = Email;
	УчетнаяЗапись.Пароль = Пароль;
	УчетнаяЗапись.Записать();
	Возврат УчетнаяЗапись.Ссылка;

КонецФункции

// Получить результат создания организации на сайте.
// 
// Параметры:
//  СтруктураПараметров - Структура - Структура параметров
//  ТокенСессии - Строка - Токен сессии
// 
// Возвращаемое значение:
//  Структура, Произвольный - Получить результат создания организации на сайте
Функция ПолучитьРезультатСозданияОрганизацииНаСайте(СтруктураПараметров, ТокенСессии = "") Экспорт

	СоединениеССервером = ПолучитьСоединение();//HTTPСоединение

	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/json");
	Заголовки.Вставить("Cookie", ТокенСессии);

	Ресурс = "api/company";

	ТелоЗапроса = TK_РаботаСWeb.СериализоватьJSON(СтруктураПараметров);

	HTTPЗапрос = Новый HTTPЗапрос(Ресурс, Заголовки);
	HTTPЗапрос.УстановитьТелоИзСтроки(ТелоЗапроса);
	Результат = СоединениеССервером.ВызватьHTTPМетод("POST", HTTPЗапрос);
	Ответ = Результат.ПолучитьТелоКакСтроку();

	СтруктураДанных = TK_РаботаСWeb.ПолучитьДанныеИзJSON(Ответ);

	Возврат СтруктураДанных;

КонецФункции

// Выполнить авторизацию.
// 
// Параметры:
//  СтруктураТокенов - Структура - Структура токенов
//  УжеЗарегистрирован - Булево - Уже зарегистрирован
Процедура ВыполнитьАвторизацию(СтруктураТокенов, УжеЗарегистрирован = Ложь) Экспорт
	СоединениеССервером = ПолучитьСоединение();

	СтруктураТокенов = ПолучитьТокены(СоединениеССервером);

	УжеЗарегистрирован = ПользовательЗарегистрированВСистеме(СоединениеССервером);

КонецПроцедуры

// Зарегистрировать пользователя.
// 
// Параметры:
//  СтруктураТокенов - Структура - Структура токенов
Процедура ЗарегистрироватьПользователя(СтруктураТокенов) Экспорт

	СоединениеССервером = ПолучитьСоединение();

	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");
	Заголовки.Вставить("Cookie", "NEXT_LOCALE=ru;" + СтруктураТокенов.ТокенИзCookie);

	Ресурс = "api/auth/signin/email";

	ТелоЗапроса = СтрШаблон("csrfToken=%1&email=%2&json=true&redirect=false&callbakUrl=http://%3",
		СтруктураТокенов.csrfToken, СокрЛП(Email), АдресСервера);

	HTTPЗапрос = Новый HTTPЗапрос(Ресурс, Заголовки);
	HTTPЗапрос.УстановитьТелоИзСтроки(ТелоЗапроса);
	СоединениеССервером.ВызватьHTTPМетод("POST", HTTPЗапрос);

КонецПроцедуры

// Получить токен сессии.
// 
// Параметры:
//  СтруктураТокенов - Структура - Структура токенов
// 
// Возвращаемое значение:
//  Строка - Получить токен сессии
Функция ПолучитьТокенСессии(СтруктураТокенов) Экспорт

	СоединениеССервером = ПолучитьСоединение();

	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");
	Заголовки.Вставить("Cookie", "NEXT_LOCALE=ru;" + СтруктураТокенов.ТокенИзCookie);

	Ресурс = "api/auth/callback/credentials";

	ТелоЗапроса = СтрШаблон("csrfToken=%1&email=%2&password=%3&json=true&redirect=false&callbakUrl=http://%4",
		СтруктураТокенов.csrfToken, СокрЛП(Email), СокрЛП(Пароль), АдресСервера);

	HTTPЗапрос = Новый HTTPЗапрос(Ресурс, Заголовки);
	HTTPЗапрос.УстановитьТелоИзСтроки(ТелоЗапроса);
	Результат = СоединениеССервером.ВызватьHTTPМетод("POST", HTTPЗапрос);

	СтрокаКуки = Результат.Заголовки.Получить("set-cookie");

	НачальныйСимвол = СтрНайти(СтрокаКуки, "__Secure-next-auth.session-token=");

	ПерваяЧастьСтроки = Сред(СтрокаКуки, НачальныйСимвол, СтрДлина(СтрокаКуки));

	КонечныйСимвол = СтрНайти(ПерваяЧастьСтроки, ";");

	ПолученнаяСтрока = Сред(ПерваяЧастьСтроки, 0, КонечныйСимвол - 1);

	Если НачальныйСимвол = 0 Тогда
		ПолученнаяСтрока = "";
	КонецЕсли;

	Возврат ПолученнаяСтрока;

КонецФункции

// Пользователь зарегистрирован в системе.
// 
// Параметры:
//  СоединениеССервером - HTTPСоединение - Соединение с сервером
// 
// Возвращаемое значение:
//  Булево - Пользователь зарегистрирован в системе
Функция ПользовательЗарегистрированВСистеме(СоединениеССервером) Экспорт

	СтруктураДанных = ДанныеПроверкиПользователя(СоединениеССервером);

	Если СтруктураДанных.Свойство("result") И СтруктураДанных.result.Количество() > 0 Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;

КонецФункции

// Получить данные пользователя.
// 
// Параметры:
//  УчетнаяЗапись - СправочникСсылка.TK_УчетныеЗаписиНаСайте - Учетная запись
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Получить данные пользователя:
// * ИДОрганизации - Строка 
// * НаименованиеОрганизации - Строка 
// * ИННОрганизации - Строка 
// * ОрганизацияВ1С - Строка
Функция ПолучитьДанныеПользователя(УчетнаяЗапись) Экспорт

	КвалификаторСтроки = Новый КвалификаторыСтроки(256, ДопустимаяДлина.Фиксированная);

	СтруктураДанных = ДанныеПроверкиПользователя();

	ТаблицаОрганизаций = Новый ТаблицаЗначений;
	ТаблицаОрганизаций.Колонки.Добавить("ИДОрганизации", Новый ОписаниеТипов("Строка", , КвалификаторСтроки));
	ТаблицаОрганизаций.Колонки.Добавить("НаименованиеОрганизации", Новый ОписаниеТипов("Строка", , КвалификаторСтроки));
	ТаблицаОрганизаций.Колонки.Добавить("ИННОрганизации", Новый ОписаниеТипов("Строка", , КвалификаторСтроки));
	ТаблицаОрганизаций.Колонки.Добавить("ОрганизацияВ1С");
	Если СтруктураДанных.Свойство("result") Тогда

		РезультатДанных = СтруктураДанных.result;
		Данные = ?(РезультатДанных.Количество() > 0, РезультатДанных.Получить(0), Неопределено);
		КомпанииНаСайте = Данные.companies;

		Для Каждого Орг Из КомпанииНаСайте Цикл
			Если Орг.companyRole.default Тогда
				СтрокаТЗ = ТаблицаОрганизаций.Добавить();
				СтрокаТЗ.ИДОрганизации = Орг.company.id;
				СтрокаТЗ.НаименованиеОрганизации = Орг.company.name;
				СтрокаТЗ.ИННОрганизации = Орг.company.tin;
				СтрокаТЗ.ОрганизацияВ1С = Справочники.Организации.НайтиПоРеквизиту("Инн", Орг.company.tin);
			КонецЕсли;
		КонецЦикла;

	КонецЕсли;

	Возврат ПолучитьСоответствияОрганизаций(ТаблицаОрганизаций, УчетнаяЗапись);

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура СохранитьДанныеСоответствия(УчетнаяЗапись, ТаблицаОрганизаций)

	НаборЗаписей = РегистрыСведений.TK_СоответствияОрганизаций.СоздатьНаборЗаписей();
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();

	ТаблицаДляЗагрузки = ПолучитьТаблицуДляЗагрузки(ТаблицаОрганизаций);

	Для Каждого ДанныеТаблицы Из ТаблицаДляЗагрузки Цикл
		СтрокаНабора = НаборЗаписей.Добавить();
		СтрокаНабора.УчетнаяЗапись = УчетнаяЗапись;
		СтрокаНабора.Организация = ДанныеТаблицы.ОрганизацияВ1С;
		СтрокаНабора.ОрганизацияНаСайте = ДанныеТаблицы.ИДОрганизации;
	КонецЦикла;

	НаборЗаписей.Записать();

КонецПроцедуры

Функция ПолучитьТаблицуДляЗагрузки(ТаблицаОрганизаций)

	МассивПустыхСтрок = ТаблицаОрганизаций.НайтиСтроки(Новый Структура("ОрганизацияВ1С",
		Справочники.Организации.ПустаяСсылка()));

	Для Каждого Элемент Из МассивПустыхСтрок Цикл
		ТаблицаОрганизаций.Удалить(Элемент);
	КонецЦикла;

	Возврат ТаблицаОрганизаций;

КонецФункции
 
// Обновить пароль учетной записи.
// 
// Параметры:
//  УчетнаяЗапись - СправочникСсылка.TK_УчетныеЗаписиНаСайте - Учетная запись
// 
// Возвращаемое значение:
//  СправочникСсылка.TK_УчетныеЗаписиНаСайте
Функция ОбновитьПарольУчетнойЗаписи(УчетнаяЗапись)

	ТекущийПароль = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(УчетнаяЗапись, "Пароль");

	Если ТекущийПароль = Пароль Тогда
		Возврат УчетнаяЗапись;
	КонецЕсли;

	УчетнаяЗаписьОбъект = УчетнаяЗапись.ПолучитьОбъект();
	УчетнаяЗаписьОбъект.Пароль = Пароль;
	УчетнаяЗаписьОбъект.Записать();

	Возврат УчетнаяЗаписьОбъект.Ссылка;

КонецФункции

Функция ПолучитьСоответствияОрганизаций(ТаблицаОрганизаций, УчетнаяЗапись)

	Если Не ЗначениеЗаполнено(УчетнаяЗапись) Тогда
		Возврат ТаблицаОрганизаций;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
				   |	ТаблицаОрганизаций.ИДОрганизации,
				   |	ТаблицаОрганизаций.НаименованиеОрганизации,
				   |	ТаблицаОрганизаций.ИННОрганизации
				   |ПОМЕСТИТЬ ВТ_Орг
				   |ИЗ
				   |	&ТаблицаОрганизаций КАК ТаблицаОрганизаций
				   |;
				   |
				   |////////////////////////////////////////////////////////////////////////////////
				   |ВЫБРАТЬ
				   |	ВТ_Орг.ИДОрганизации,
				   |	ВТ_Орг.НаименованиеОрганизации,
				   |	ВТ_Орг.ИННОрганизации,
				   |	TK_СоответствияОрганизаций.Организация КАК ОрганизацияВ1С
				   |ПОМЕСТИТЬ ТЗ
				   |ИЗ
				   |	ВТ_Орг КАК ВТ_Орг
				   |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.TK_СоответствияОрганизаций КАК TK_СоответствияОрганизаций
				   |		ПО ВТ_Орг.ИДОрганизации = TK_СоответствияОрганизаций.ОрганизацияНаСайте
				   |ГДЕ
				   |	TK_СоответствияОрганизаций.УчетнаяЗапись = &УчетнаяЗапись
				   |;
				   |
				   |////////////////////////////////////////////////////////////////////////////////
				   |ВЫБРАТЬ
				   |	ВТ_Орг.ИДОрганизации,
				   |	ВТ_Орг.НаименованиеОрганизации,
				   |	ВТ_Орг.ИННОрганизации,
				   |	ТЗ.ОрганизацияВ1С
				   |ИЗ
				   |	ВТ_Орг КАК ВТ_Орг
				   |		ЛЕВОЕ СОЕДИНЕНИЕ ТЗ КАК ТЗ
				   |		ПО ВТ_Орг.ИДОрганизации = ТЗ.ИДОрганизации";
	Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗапись);
	Запрос.УстановитьПараметр("ТаблицаОрганизаций", ТаблицаОрганизаций);

	Выборка = Запрос.Выполнить().Выгрузить();
	Возврат Выборка;

КонецФункции

Функция ДанныеПроверкиПользователя(СоединениеССервером = Неопределено)

	Если СоединениеССервером = Неопределено Тогда
		СоединениеССервером = ПолучитьСоединение();
	КонецЕсли;

	Заголовки = Новый Соответствие;

	Ресурс = "api/user";

	HTTPЗапрос = Новый HTTPЗапрос(Ресурс, Заголовки);
	HTTPЗапрос.АдресРесурса = Ресурс + "?email=" + СокрЛП(Email) + "&page=1&limit=10";
	Результат = СоединениеССервером.Получить(HTTPЗапрос);
	Ответ = Результат.ПолучитьТелоКакСтроку();

	СтруктураДанных = TK_РаботаСWeb.ПолучитьДанныеИзJSON(Ответ);

	Возврат СтруктураДанных;

КонецФункции

Функция ПолучитьТокены(СоединениеССервером)

	ТокенCSRF = "";

	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("csrfToken");
	СтруктураВозврата.Вставить("ТокенИзCookie");

	Заголовки = Новый Соответствие;

	HTTPЗапрос = Новый HTTPЗапрос("api/auth/csrf", Заголовки);
	Результат = СоединениеССервером.Получить(HTTPЗапрос);
	Ответ = Результат.ПолучитьТелоКакСтроку();

	ТокенИзCookie = Результат.Заголовки.Получить("set-cookie");

	СтруктураДанных = TK_РаботаСWeb.ПолучитьДанныеИзJSON(Ответ);

	Если СтруктураДанных.Свойство("csrfToken") Тогда
		ТокенCSRF = СтруктураДанных.csrfToken;
	КонецЕсли;

	СтруктураВозврата.csrfToken =  ТокенCSRF;
	СтруктураВозврата.ТокенИзCookie = ТокенИзCookie;

	Возврат СтруктураВозврата;

КонецФункции

Функция ПолучитьСоединение()

	ЗащищенноеСоединение = ОбщегоНазначенияКлиентСервер.НовоеЗащищенноеСоединение();

	Возврат Новый HTTPСоединение(АдресСервера, , , , , , ЗащищенноеСоединение);

КонецФункции

#КонецОбласти

#Область Инициализация

АдресСервера = "teklifo.com";

#КонецОбласти

#КонецЕсли